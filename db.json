{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"source/images/spec依赖检查机制/image-20230701170955227.png","path":"images/spec依赖检查机制/image-20230701170955227.png","modified":0,"renderable":0},{"_id":"source/images/spec依赖检查机制/image-20230701171040194.png","path":"images/spec依赖检查机制/image-20230701171040194.png","modified":0,"renderable":0},{"_id":"source/images/spec依赖检查机制/image-20230701173341798.png","path":"images/spec依赖检查机制/image-20230701173341798.png","modified":0,"renderable":0},{"_id":"source/images/spec依赖检查机制/image-20230701173925324.png","path":"images/spec依赖检查机制/image-20230701173925324.png","modified":0,"renderable":0},{"_id":"source/images/spec依赖检查机制/image-20230701174018570.png","path":"images/spec依赖检查机制/image-20230701174018570.png","modified":0,"renderable":0},{"_id":"source/images/spec依赖检查机制/image-20230701175121884.png","path":"images/spec依赖检查机制/image-20230701175121884.png","modified":0,"renderable":0},{"_id":"source/images/编程语言兼容性/image-20230611113916798.png","path":"images/编程语言兼容性/image-20230611113916798.png","modified":0,"renderable":0},{"_id":"source/images/编程语言兼容性/image-20230611121349952.png","path":"images/编程语言兼容性/image-20230611121349952.png","modified":0,"renderable":0},{"_id":"source/images/编程语言源/image-20230929220230437.png","path":"images/编程语言源/image-20230929220230437.png","modified":0,"renderable":0},{"_id":"source/images/编程语言源/image-20230929231952522.png","path":"images/编程语言源/image-20230929231952522.png","modified":0,"renderable":0},{"_id":"source/images/编程语言源/image-20230930004122812.png","path":"images/编程语言源/image-20230930004122812.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"c9705161688d5b41d879adfa0dc3c90159bf614f","modified":1714634313934},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1714630997564},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1714630998052},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1714630998108},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1714630998048},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1714630998108},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1714630998112},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714630998112},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714630998116},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1714630998116},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1714630998116},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1714630998116},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1714630998120},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1714630998120},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1714630998120},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1714630998124},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1714630998124},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1714630998124},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1714630998128},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1714630998128},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1714630998128},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1714630998132},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1714630998132},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1714630998132},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1714630998136},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1714630998136},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1714630998136},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1714630998140},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1714630998140},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1714630998140},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1714630998140},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1714630998144},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1714630998144},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1714630998144},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1714630998144},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1714630998148},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1714630998148},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1714630997848},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1714630997876},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1714630997908},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1714630997912},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1714630997920},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1714630997924},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1714630997944},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1714630998008},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1714630997740},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1714630997776},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1714630997788},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1714630997852},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1714630997888},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1714630997896},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1714630997900},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1714630997900},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1714630997904},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1714630997912},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1714630997936},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1714630997824},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1714630997872},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1714630997924},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1714630997940},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1714630997948},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1714630998060},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1714630998060},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1714630998104},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1714630997656},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1714630998044},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1714630997868},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1714630997884},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1714630997892},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1714630997916},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1714630997940},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1714630997952},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1714630998068},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1714630998072},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1714630998076},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1714630998076},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1714630998088},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1714630998088},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1714630998092},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1714630998092},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1714630998096},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1714630998100},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1714630998084},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1714630998092},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1714630998040},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1714630998028},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1714630998004},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547864},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547868},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547872},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547880},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547884},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547840},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547844},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547852},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547856},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1714631547864},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":1714631547944},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":1714631547884},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":1714631547948},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"18b3b80cf6456697a675721d957362840c1ab949","modified":1714631547916},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"4b8a3096137e0d879fb17972a69630bde38d8212","modified":1714631547888},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"e02471f80db87db43aa7d527176e195b60dc4b99","modified":1714631547892},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"040fed1d0d7e4d8003446d1541bc15a2c4b4e500","modified":1714631547900},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":1714631548064},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":1714631548064},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":1714631548068},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"b992b68705f5050a99de926525b3cb40d95c4769","modified":1714631548068},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":1714631548068},{"_id":"node_modules/hexo-theme-icarus/languages/it.yml","hash":"b76999994cda6b08b53d34c3dd67947f164de655","modified":1714631548068},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":1714631548068},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":1714631548072},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":1714631548072},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":1714631548072},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":1714631548072},{"_id":"node_modules/hexo-theme-icarus/languages/sv.yml","hash":"b12eee168c52aac855ffce9f78fe5fd5d6e3970c","modified":1714631548072},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":1714631548072},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":1714631548076},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":1714631548076},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":1714631548076},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":1714631548076},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"daf8eca64197709a9dc4a4792c403a32d78bdfae","modified":1714631547924},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1714631547932},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1714631547932},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1714631547940},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":1714631547940},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1714631547940},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1714631547940},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1714631547944},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1714631547944},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"93a79969c7eb47cfac097893cda36368db56902c","modified":1714631547896},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":1714631547892},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"a46da71c20fa9d73c1bac26fda77717abae1b308","modified":1714631547900},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":1714631547900},{"_id":"node_modules/hexo-theme-icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":1714631547900},{"_id":"node_modules/hexo-theme-icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":1714631547900},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"f233678cd656c0e300181ca79dd30cb42fc213b3","modified":1714631547912},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":1714631548028},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":1714631548028},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1714631548032},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":1714631548032},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":1714631548032},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":1714631548044},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1714631548044},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":1714631548048},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":1714631548048},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":1714631548052},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":1714631548052},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1714631548052},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1714631548056},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1714631548060},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":1714631548060},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1714631547892},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"c4fc3c016de42c50614f70538a23359eee905ed3","modified":1714631547928},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"0610cadb3976954c6f299d30320a93a1bd2a151c","modified":1714631547932},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"fd52330d582fd122db7f55444c2f3368ff4bd8d7","modified":1714631547936},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"de966666f1e4ef80e0d15081b2709c3065b246dd","modified":1714631547936},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"ff049c2837a111da775d1661b605dd417614b84c","modified":1714631547936},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":1714631547940},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"2e27800b2a8a87112c96778db858c3419d890b79","modified":1714631547940},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"eaec7c7b936197247e5acd73a79ca951da4d82ec","modified":1714631547944},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"1409627d98a92b4f5b2ab829f8e6b50b75d60e53","modified":1714631547944},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"0fad6f8a91bb5cf678b9ff2d66d2162d61625074","modified":1714631547944},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"7a89ac72a988d13b4714ab78a6dfd5cd8de85d47","modified":1714631547944},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1714631547920},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":1714631547932},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":1714631547940},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":1714631548040},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1714631548044},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":1714631548060},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1714631548020},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1714631548060},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1714631548060},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1714631548028},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1714631548064},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1714631548064},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":1714631547888},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":1714631547888},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":1714631547888},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"37f3b16fbd9668b9496d5f2d9bd9fb22fc6cee27","modified":1714631547896},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":1714631547908},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"f49270b619f5d2c3decde6b0b5a0c3bbab4b54a5","modified":1714631547908},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":1714631547912},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"e85c9d7f2579805beb252a1b6345d5a668a13baa","modified":1714631547912},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":1714631547912},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":1714631547916},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":1714631547916},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1714631547916},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1714631547916},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1714631547916},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1714631547920},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":1714631547920},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1714631547904},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1714631547908},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1714631547916},{"_id":"source/_drafts/草稿.md","hash":"d127342774c0a82b5c77ee14d359047a0405e974","modified":1714632430012},{"_id":"source/页面/index.md","hash":"1e5708189d23040ea5b0986bd7959c70851a2b6f","modified":1714632459373},{"_id":"source/_posts/rpm.spec/image-20230701171040194.png","hash":"05c7468abc53237f3086cec43581b2c83665722a","modified":1714634215209},{"_id":"source/_posts/rpm.spec/image-20230701173341798.png","hash":"009248d65ee6d3b30a9b4c432a96a6096dd42a1d","modified":1714634215209},{"_id":"source/_posts/rpm.spec/image-20230701173925324.png","hash":"ce52cee7b28f2b22a0eaff8268b4c8f587f3f63f","modified":1714634215209},{"_id":"source/_posts/rpm.spec/image-20230701174018570.png","hash":"90c26441a14b81bad773129e8b1f98122f1ee085","modified":1714634215209},{"_id":"source/_posts/rpm.spec/image-20230701175121884.png","hash":"84b0b9823f256d65e43133d857bc62bc1fc66c6c","modified":1714634215209},{"_id":"source/_posts/编程语言兼容性/image-20230611121349952.png","hash":"bd0d16f58244f11a5da3c219831eacd0dbc15abd","modified":1714634215213},{"_id":"source/_posts/rpm.spec/image-20230701170955227.png","hash":"4e0d04198b2928f1a5a74448bbf56b31c4f08233","modified":1714634215209},{"_id":"source/_posts/编程语言兼容性/image-20230611113916798.png","hash":"e46524dd9184de348df1cf60188e0626253e2daa","modified":1714634215213},{"_id":"source/_posts/编程语言源/image-20230930004122812.png","hash":"e09d3600de5f86a0b10fad7ea5d2fb782947bfc5","modified":1714634215213},{"_id":"source/_posts/编程语言源/image-20230929220230437.png","hash":"5e7aecc5f4662c497abada2c4cd19a3cf1c373f1","modified":1714634215213},{"_id":"source/_posts/编程语言源/image-20230929231952522.png","hash":"53bba0df2275b2c1b801c9b193f09fc77a8757c5","modified":1714634215213},{"_id":"source/_posts/spec依赖检查机制/image-20230701171040194.png","hash":"05c7468abc53237f3086cec43581b2c83665722a","modified":1714634215209},{"_id":"source/_posts/spec依赖检查机制/image-20230701173341798.png","hash":"009248d65ee6d3b30a9b4c432a96a6096dd42a1d","modified":1714634215209},{"_id":"source/_posts/spec依赖检查机制/image-20230701173925324.png","hash":"ce52cee7b28f2b22a0eaff8268b4c8f587f3f63f","modified":1714634215209},{"_id":"source/_posts/spec依赖检查机制/image-20230701174018570.png","hash":"90c26441a14b81bad773129e8b1f98122f1ee085","modified":1714634215209},{"_id":"source/_posts/spec依赖检查机制/image-20230701175121884.png","hash":"84b0b9823f256d65e43133d857bc62bc1fc66c6c","modified":1714634215209},{"_id":"source/_posts/spec依赖检查机制/image-20230701170955227.png","hash":"4e0d04198b2928f1a5a74448bbf56b31c4f08233","modified":1714634215209},{"_id":"source/images/spec依赖检查机制/image-20230701171040194.png","hash":"05c7468abc53237f3086cec43581b2c83665722a","modified":1714634215209},{"_id":"source/images/spec依赖检查机制/image-20230701173341798.png","hash":"009248d65ee6d3b30a9b4c432a96a6096dd42a1d","modified":1714634215209},{"_id":"source/images/spec依赖检查机制/image-20230701173925324.png","hash":"ce52cee7b28f2b22a0eaff8268b4c8f587f3f63f","modified":1714634215209},{"_id":"source/images/spec依赖检查机制/image-20230701174018570.png","hash":"90c26441a14b81bad773129e8b1f98122f1ee085","modified":1714634215209},{"_id":"source/images/spec依赖检查机制/image-20230701175121884.png","hash":"84b0b9823f256d65e43133d857bc62bc1fc66c6c","modified":1714634215209},{"_id":"source/images/spec依赖检查机制/image-20230701170955227.png","hash":"4e0d04198b2928f1a5a74448bbf56b31c4f08233","modified":1714634215209},{"_id":"source/images/编程语言兼容性/image-20230611121349952.png","hash":"bd0d16f58244f11a5da3c219831eacd0dbc15abd","modified":1714634215213},{"_id":"source/images/编程语言源/image-20230930004122812.png","hash":"e09d3600de5f86a0b10fad7ea5d2fb782947bfc5","modified":1714634215213},{"_id":"source/images/编程语言兼容性/image-20230611113916798.png","hash":"e46524dd9184de348df1cf60188e0626253e2daa","modified":1714634215213},{"_id":"source/images/编程语言源/image-20230929220230437.png","hash":"5e7aecc5f4662c497abada2c4cd19a3cf1c373f1","modified":1714634215213},{"_id":"source/images/编程语言源/image-20230929231952522.png","hash":"53bba0df2275b2c1b801c9b193f09fc77a8757c5","modified":1714634215213},{"_id":"source/_posts/spec依赖检查机制.md","hash":"aa36f00e77114313678390fc710e4b613a96143b","modified":1714635334756},{"_id":"source/_posts/编程语言兼容性.md","hash":"66e7362e8789932e00acf4b9bbf3a327ad014cc2","modified":1714635377921},{"_id":"source/_posts/编程语言源.md","hash":"214cb46b858165fab945d3189fde20e5ae19cba6","modified":1714635430382}],"Category":[{"name":"指导书","_id":"clvow0nat0005adpv62w14f2j"},{"name":"生态","_id":"clvow0naz000badpv173d2a7h"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n测试这是一个中文文档\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\n测试这是一个中文文档\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-05-02T07:18:33.934Z","updated":"2024-05-02T07:18:33.934Z","_id":"clvov8yts0000owpv952x1l9d","comments":1,"layout":"post","photos":[],"content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试这是一个中文文档</p>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>测试这是一个中文文档</p>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"layout":"post","title":"编程语言兼容性","date":"2023-06-05T15:00:02.000Z","_content":"\n## 前言\n\n本文将讨论各类编程语言兼容性都是怎么引入的，这里的兼容性是指对硬件的兼容性、对不同架构平台芯片的兼容性。\n\n**什么是好的兼容性？**\n\n如果一款软件能够提供不同平台的二进制，或者一个二进制能够在不同平台上跑，那么说明这款软件的兼容性完备。\n\n**什么时候会出现兼容性问题？**\n\n- 当代码中硬编码了汇编语言\n- 当代码中调用了so库，而该so库还被打包到最终的可运行包里\n- 当代码中调用了so库，且该so库是由软件源码包中的c/c++等待编译文件编译出来的\n\n以上这些情况均会导致软件与平台相关，进而导致软件必须提供不同平台编译版本才能满足软件在指定平台的可运行。\n\n只要软件和平台相关，那么当指定平台缺少该软件的预编译包时，整个上层应用在该平台上的安装就会失败，从而带来不好的兼容性体验。\n\n**那么，如何评价一款软件在给定平台的兼容性情况？**\n\n首先需要明确的是，兼容性达成情况是一个bool类型。软件是否兼容与软件有多么不兼容，后者会影响到你去做迁移适配的动作吗？难道软件严重不兼容就不做平台适配了？并不是的，对于给定的平台，我们想让软件跑起来，无论它具有多少不兼容代码，都得一一解决。唯有此，才能达成软件运行的目的。所以，评价软件兼容性是一个非黑即白的结论。\n\n**如何识别软件是否需要做兼容性？**\n\n- 分析源码\n- 直接在指定平台上编译运行\n\n针对第一点，以下挑选了top流行语言来列举各种可能存在的硬件兼容性情况。\n\n## javascript\n\n### 代码调用so\n\njavascript调用so，使用node-ffi包：[node-ffi/node-ffi: Node.js Foreign Function Interface (github.com)](https://github.com/node-ffi/node-ffi)\n\n```javascript\nvar ffi = require('ffi');\n\nvar libm = ffi.Library('libm', {\n  'ceil': [ 'double', [ 'double' ] ]\n});\nlibm.ceil(1.5); // 2\n\n// You can also access just functions in the current process by passing a null\nvar current = ffi.Library(null, {\n  'atoi': [ 'int', [ 'string' ] ]\n});\ncurrent.atoi('1234'); // 1234\n```\n\n**兼容性识别关键点：检查编译后的包是否包含so。**\n\n### 代码包含c/c++\n\n有些javascript包中带有其他编程语言，比如node-ffi：https://api.github.com/repos/node-ffi/node-ffi/languages\n\n```json\n{\n    \"JavaScript\": 65311,\n    \"C++\": 35850,\n    \"C\": 1364,\n    \"Python\": 921\n}\n```\n\n可以看到，js包里面具有c/c++编译型语言，这种包自然会导致平台兼容性问题。\n\n**兼容性识别关键点：检查源码中是否包含编译型语言。**\n\n### assembly技术\n\njavascript运行会被浏览器翻译为assembly中间机器语言，这里的机器语言并非CPU相关，真正运行还要再转义一次。\n\n这篇文章以一种自定义的JS-ASM来描绘java assembly是怎么工作的：[JavaScript Assembler Language Specification (JS-ASM) - CodeProject](https://www.codeproject.com/Articles/417071/JavaScript-Assembler-Language-Specification-JS-ASM)\n\n### npm包\n\n**npm包背景知识**\n\nnpm包制作和发布参考：[How to Create and Publish an NPM Package – a Step-by-Step Guide (freecodecamp.org)](https://www.freecodecamp.org/news/how-to-create-and-publish-your-first-npm-package/)\n\n制作npm包有两种方式：\n\n```bash\n# 方式1：link形式\nnpm link  # 将当前npm工程本地全局发布\nnpm link <package-name>  # 在其他工程目录下通过该命令引用\n\n# 方式2：离线包形式\nnpm pack  # 将当前npm工程打包为一个tgz\ncp /path/to/<package>.tgz .  # 在其他工程目录下通过该命令集成\n# 修改package.json，指定<package-name>: <package>.tgz\n```\n\nnpm包安装过程解读：[How npm install Works Internally? - DEV Community](https://dev.to/shree_j/how-npm-works-internally-4012)\n\nnpm包工作的核心文件是package.json，该文件内定义了npm如何对该包进行操作，包括install、serve、test等。\n\n如果没有特别说明，包内index.js为npm包的入口（entrypoint），新包发布所能使用的功能函数统一从这里出口（export）\n\n**了解这些背景知识后，我们看下有哪些情况npm包在安装时会触发兼容性问题**\n\n**案例1：**[Npm install 2.8.2 fails on ARM64, asks to upgrade to 2.5.1 or later - core - Meteor.js forums](https://forums.meteor.com/t/npm-install-2-8-2-fails-on-arm64-asks-to-upgrade-to-2-5-1-or-later/59177/4)\n\n该案例里npm包内具有平台检测硬编码，之所以做这类平台限制，是因为该包依赖了mongodb，而mongodb是平台相关，为适配arm，做了如下修复：\n\n[Support ARM on Linux by aquinoit · Pull Request #12160 · meteor/meteor (github.com)](https://github.com/meteor/meteor/pull/12160/files#diff-e139871b4a22b32fdb9a795e1ac8ee683d848695e01d8b170e168534ef63d6c8)\n\n![image-20230611113916798](/images/编程语言兼容性/image-20230611113916798.png)\n\n**案例2：**[Unable to `npm install` on M1 · Issue #668 · twilio/twilio-video-app-react (github.com)](https://github.com/twilio/twilio-video-app-react/issues/668)\n\n该报错是因为npm安装过程中apt install chromium-browser命令执行失败导致，最后通过手动补全chromium依赖解决。\n\n结合以上案例可以得出，npm包在安装过程中体现的兼容性问题，取决于npm包安装脚本是否有外界依赖引入。\n\n**兼容性识别关键点：直接跑一遍npm install来检验**\n\n\n\n### python\n\n#### 代码调用c\n\n这篇文章介绍了各种python调用c的方法，并给出了优劣势对比：[Python Bindings: Calling C or C++ From Python – Real Python](https://realpython.com/python-bindings-overview/)\n\nctypes内置包会处理所有跟c、so的交互：\n\n```python\nfrom ctypes import *\n# either\nlibc = cdll.LoadLibrary(\"libc.so.6\")\n# or\nlibc = CDLL(\"libc.so.6\")\n```\n\n**兼容性识别关键点：识别源码中是否带有so名称，编译好的包是否具有so。**\n\n### wheel包\n\n**wheel包背景知识**\n\n和npm包一样，wheel包也有一个类似package.json的核心文件来承载包的元数据信息，该核心文件有一个演进史：\n\n[What's the difference between setup.py and setup.cfg in python projects - Stack Overflow](https://stackoverflow.com/questions/39484863/whats-the-difference-between-setup-py-and-setup-cfg-in-python-projects)\n\n最开始是setup.py，然后是setup.cfg，再到现在则为pyproject.toml\n\n打包wheel的命令也有很多种，如build、wheel工具等，示例参考：[How to Create Python Packages | Towards Data Science](https://towardsdatascience.com/how-to-package-your-python-code-df5a7739ab2e)\n\n**wheel包安装兼容性问题**\n\n安装过程触发本地编译，通过setup.py：\n\n![image-20230611121349952](/images/编程语言兼容性/image-20230611121349952.png)\n\n此时如果setup.py过程对平台有依赖，就会报错。\n\n同npm包，wheel包安装失败的原因仅有可能是引入了外部依赖。\n\n**兼容性识别关键点：直接跑一遍pip install来检验**\n\n\n\n## java\n\njava调用so的方式是通过JNI或JNA。\n\n### jni\n\nJNI用法：[Call c function from Java - Stack Overflow](https://stackoverflow.com/questions/5963266/call-c-function-from-java)\n\n```java\nclass HelloWorld {\n    private native void print();  // 声明c方法\n\n    public static void main(String[] args) {\n        new HelloWorld().print();\n    }\n\n    static {\n        System.loadLibrary(\"HelloWorld\");  // 加载HelloWorld.so库\n    }\n}\n```\n\n这里还包含怎么编译so库出来的问题，详细见上述链接。\n\n**兼容性识别关键点：native、System.loadLibrary关键字**\n\n### jna\n\nJNA方法：[jna/GettingStarted.md at master · java-native-access/jna · GitHub](https://github.com/java-native-access/jna/blob/master/www/GettingStarted.md)\n\n```java\npackage com.sun.jna.examples;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Platform;\n\n/** Simple example of JNA interface mapping and usage. */\npublic class HelloWorld {\n\n    // This is the standard, stable way of mapping, which supports extensive\n    // customization and mapping of Java to native types.\n\n    public interface CLibrary extends Library {\n        CLibrary INSTANCE = (CLibrary)\n            Native.load((Platform.isWindows() ? \"msvcrt\" : \"c\"),\n                                CLibrary.class);\n\n        void printf(String format, Object... args);\n    }\n\n    public static void main(String[] args) {\n        CLibrary.INSTANCE.printf(\"Hello, World\\n\");\n        for (int i=0;i < args.length;i++) {\n            CLibrary.INSTANCE.printf(\"Argument %d: %s\\n\", i, args[i]);\n        }\n    }\n```\n\n**兼容性识别关键点：是否引用了jna依赖。**\n\n### 其他jvm系语言\n\n其他基于java虚拟机开发的语言调用so方法和上述类似，均通过java官方的JNI或JNA方法：\n\n- scala：[scala c integration - Stack Overflow](https://stackoverflow.com/questions/6286044/scala-c-integration)\n- kotlin：[Calling C function from Kotlin using JNI - Stack Overflow](https://stackoverflow.com/questions/72646387/calling-c-function-from-kotlin-using-jni)\n- groovy：[java - Call C API from Groovy - Stack Overflow](https://stackoverflow.com/questions/1105211/call-c-api-from-groovy?rq=4)\n- clojure：[Calling C++ from clojure - Stack Overflow](https://stackoverflow.com/questions/53359255/calling-c-from-clojure)\n\n\n\n## perl\n\nperl语言的特点跟python类似，也是一种脚本解释语言。\n\n### 代码调用c\n\nperl调用c的方法如下：[How do I call a C function from a Perl program? - Stack Overflow](https://stackoverflow.com/questions/15136890/how-do-i-call-a-c-function-from-a-perl-program)\n\n```perl\nuse Inline C => <<'__END_OF_C__';\n\n    int sum(int a, int b)\n    {\n        return (a+b);\n    }\n\n__END_OF_C__\n\nsay sum($x,$y);\n```\n\n\n\n## ruby\n\nruby也是一种解释型语言。\n\n### 代码调用c\n\nruby调用c的方式是通过`rb_define_method`方法：[How to create a Ruby extension in C in under 5 minutes (rubyinside.com)](http://www.rubyinside.com/how-to-create-a-ruby-extension-in-c-in-under-5-minutes-100.html)\n\n```ruby\n// Include the Ruby headers and goodies\n#include \"ruby.h\"\n\n// Defining a space for information and references about the module to be stored internally\nVALUE MyTest = Qnil;\n\n// Prototype for the initialization method - Ruby calls this, not you\nvoid Init_mytest();\n\n// Prototype for our method 'test1' - methods are prefixed by 'method_' here\nVALUE method_test1(VALUE self);\n\n// The initialization method for this module\nvoid Init_mytest() {\n\tMyTest = rb_define_module(\"MyTest\");  // 定义c模块\n\trb_define_method(MyTest, \"test1\", method_test1, 0);  // 定义c方法\n}\n\n// Our 'test1' method.. it simply returns a value of '10' for now.\nVALUE method_test1(VALUE self) {\n\tint x = 10;\n\treturn INT2NUM(x);\n}\n```\n\n\n\n### 代码调用so\n\nruby调用so的方式通过借助ffi：[Calling C shared libraries with ruby FFI (jertype.com)](https://www.jertype.com/calling-c-shared-library/)\n\n```ruby\nrequire 'ffi'\n\nmodule ConcatInterop\n  extend FFI::Library\n\n  ffi_lib './concat.so'\n  attach_function :concat, [:string, :string, :pointer], :void\nend\n```\n\n\n\n## lua\n\nlua也是一种解释型语言。\n\n### 代码调用c\n\nlua调用c的方式是通过`lua_CFunction`方法：[How would I make a C-function that I can call from Lua? - Stack Overflow](https://stackoverflow.com/questions/4190697/how-would-i-make-a-c-function-that-i-can-call-from-lua)\n\n### 代码调用so\n\nlua调用so的方式是通过ffi：[ffi - How to call a function in shared library using Lua - Stack Overflow](https://stackoverflow.com/questions/37876215/how-to-call-a-function-in-shared-library-using-lua)\n\n```lua\nlocal lib = ffi.load('some.dll')\nffi.cdef[[\n  void hello (void);\n]]\nlib.hello()\n```\n\n\n\n## php\n\nphp想要调用c或so的话，就不是在php内声明c函数签名的方式了，而是通过编写php extension：[Is it possible to call C code from php - Stack Overflow](https://stackoverflow.com/questions/3125388/is-it-possible-to-call-c-code-from-php)\n\n\n\n## c/c++/fortran/rust/go\n\n这些语言就都是编译型语言了，编译型语言一定是平台相关，意味着不存在出一个包就能达成跨平台的效果，故此类软件一定要做迁移。\n\n对于编译型语言，兼容性主要体现在编译过程，如：\n\n- 按照默认的readme、官方文档编译步骤，编译过程是否顺畅？\n- 是否存在某个平台相关选项导致编译失败？\n\n","source":"_posts/编程语言兼容性.md","raw":"---\nlayout: post\ntitle:  \"编程语言兼容性\"\ndate:   2023-06-05 23:00:02 +0800\ncategories: 生态\ntag: 兼容性\n---\n\n## 前言\n\n本文将讨论各类编程语言兼容性都是怎么引入的，这里的兼容性是指对硬件的兼容性、对不同架构平台芯片的兼容性。\n\n**什么是好的兼容性？**\n\n如果一款软件能够提供不同平台的二进制，或者一个二进制能够在不同平台上跑，那么说明这款软件的兼容性完备。\n\n**什么时候会出现兼容性问题？**\n\n- 当代码中硬编码了汇编语言\n- 当代码中调用了so库，而该so库还被打包到最终的可运行包里\n- 当代码中调用了so库，且该so库是由软件源码包中的c/c++等待编译文件编译出来的\n\n以上这些情况均会导致软件与平台相关，进而导致软件必须提供不同平台编译版本才能满足软件在指定平台的可运行。\n\n只要软件和平台相关，那么当指定平台缺少该软件的预编译包时，整个上层应用在该平台上的安装就会失败，从而带来不好的兼容性体验。\n\n**那么，如何评价一款软件在给定平台的兼容性情况？**\n\n首先需要明确的是，兼容性达成情况是一个bool类型。软件是否兼容与软件有多么不兼容，后者会影响到你去做迁移适配的动作吗？难道软件严重不兼容就不做平台适配了？并不是的，对于给定的平台，我们想让软件跑起来，无论它具有多少不兼容代码，都得一一解决。唯有此，才能达成软件运行的目的。所以，评价软件兼容性是一个非黑即白的结论。\n\n**如何识别软件是否需要做兼容性？**\n\n- 分析源码\n- 直接在指定平台上编译运行\n\n针对第一点，以下挑选了top流行语言来列举各种可能存在的硬件兼容性情况。\n\n## javascript\n\n### 代码调用so\n\njavascript调用so，使用node-ffi包：[node-ffi/node-ffi: Node.js Foreign Function Interface (github.com)](https://github.com/node-ffi/node-ffi)\n\n```javascript\nvar ffi = require('ffi');\n\nvar libm = ffi.Library('libm', {\n  'ceil': [ 'double', [ 'double' ] ]\n});\nlibm.ceil(1.5); // 2\n\n// You can also access just functions in the current process by passing a null\nvar current = ffi.Library(null, {\n  'atoi': [ 'int', [ 'string' ] ]\n});\ncurrent.atoi('1234'); // 1234\n```\n\n**兼容性识别关键点：检查编译后的包是否包含so。**\n\n### 代码包含c/c++\n\n有些javascript包中带有其他编程语言，比如node-ffi：https://api.github.com/repos/node-ffi/node-ffi/languages\n\n```json\n{\n    \"JavaScript\": 65311,\n    \"C++\": 35850,\n    \"C\": 1364,\n    \"Python\": 921\n}\n```\n\n可以看到，js包里面具有c/c++编译型语言，这种包自然会导致平台兼容性问题。\n\n**兼容性识别关键点：检查源码中是否包含编译型语言。**\n\n### assembly技术\n\njavascript运行会被浏览器翻译为assembly中间机器语言，这里的机器语言并非CPU相关，真正运行还要再转义一次。\n\n这篇文章以一种自定义的JS-ASM来描绘java assembly是怎么工作的：[JavaScript Assembler Language Specification (JS-ASM) - CodeProject](https://www.codeproject.com/Articles/417071/JavaScript-Assembler-Language-Specification-JS-ASM)\n\n### npm包\n\n**npm包背景知识**\n\nnpm包制作和发布参考：[How to Create and Publish an NPM Package – a Step-by-Step Guide (freecodecamp.org)](https://www.freecodecamp.org/news/how-to-create-and-publish-your-first-npm-package/)\n\n制作npm包有两种方式：\n\n```bash\n# 方式1：link形式\nnpm link  # 将当前npm工程本地全局发布\nnpm link <package-name>  # 在其他工程目录下通过该命令引用\n\n# 方式2：离线包形式\nnpm pack  # 将当前npm工程打包为一个tgz\ncp /path/to/<package>.tgz .  # 在其他工程目录下通过该命令集成\n# 修改package.json，指定<package-name>: <package>.tgz\n```\n\nnpm包安装过程解读：[How npm install Works Internally? - DEV Community](https://dev.to/shree_j/how-npm-works-internally-4012)\n\nnpm包工作的核心文件是package.json，该文件内定义了npm如何对该包进行操作，包括install、serve、test等。\n\n如果没有特别说明，包内index.js为npm包的入口（entrypoint），新包发布所能使用的功能函数统一从这里出口（export）\n\n**了解这些背景知识后，我们看下有哪些情况npm包在安装时会触发兼容性问题**\n\n**案例1：**[Npm install 2.8.2 fails on ARM64, asks to upgrade to 2.5.1 or later - core - Meteor.js forums](https://forums.meteor.com/t/npm-install-2-8-2-fails-on-arm64-asks-to-upgrade-to-2-5-1-or-later/59177/4)\n\n该案例里npm包内具有平台检测硬编码，之所以做这类平台限制，是因为该包依赖了mongodb，而mongodb是平台相关，为适配arm，做了如下修复：\n\n[Support ARM on Linux by aquinoit · Pull Request #12160 · meteor/meteor (github.com)](https://github.com/meteor/meteor/pull/12160/files#diff-e139871b4a22b32fdb9a795e1ac8ee683d848695e01d8b170e168534ef63d6c8)\n\n![image-20230611113916798](/images/编程语言兼容性/image-20230611113916798.png)\n\n**案例2：**[Unable to `npm install` on M1 · Issue #668 · twilio/twilio-video-app-react (github.com)](https://github.com/twilio/twilio-video-app-react/issues/668)\n\n该报错是因为npm安装过程中apt install chromium-browser命令执行失败导致，最后通过手动补全chromium依赖解决。\n\n结合以上案例可以得出，npm包在安装过程中体现的兼容性问题，取决于npm包安装脚本是否有外界依赖引入。\n\n**兼容性识别关键点：直接跑一遍npm install来检验**\n\n\n\n### python\n\n#### 代码调用c\n\n这篇文章介绍了各种python调用c的方法，并给出了优劣势对比：[Python Bindings: Calling C or C++ From Python – Real Python](https://realpython.com/python-bindings-overview/)\n\nctypes内置包会处理所有跟c、so的交互：\n\n```python\nfrom ctypes import *\n# either\nlibc = cdll.LoadLibrary(\"libc.so.6\")\n# or\nlibc = CDLL(\"libc.so.6\")\n```\n\n**兼容性识别关键点：识别源码中是否带有so名称，编译好的包是否具有so。**\n\n### wheel包\n\n**wheel包背景知识**\n\n和npm包一样，wheel包也有一个类似package.json的核心文件来承载包的元数据信息，该核心文件有一个演进史：\n\n[What's the difference between setup.py and setup.cfg in python projects - Stack Overflow](https://stackoverflow.com/questions/39484863/whats-the-difference-between-setup-py-and-setup-cfg-in-python-projects)\n\n最开始是setup.py，然后是setup.cfg，再到现在则为pyproject.toml\n\n打包wheel的命令也有很多种，如build、wheel工具等，示例参考：[How to Create Python Packages | Towards Data Science](https://towardsdatascience.com/how-to-package-your-python-code-df5a7739ab2e)\n\n**wheel包安装兼容性问题**\n\n安装过程触发本地编译，通过setup.py：\n\n![image-20230611121349952](/images/编程语言兼容性/image-20230611121349952.png)\n\n此时如果setup.py过程对平台有依赖，就会报错。\n\n同npm包，wheel包安装失败的原因仅有可能是引入了外部依赖。\n\n**兼容性识别关键点：直接跑一遍pip install来检验**\n\n\n\n## java\n\njava调用so的方式是通过JNI或JNA。\n\n### jni\n\nJNI用法：[Call c function from Java - Stack Overflow](https://stackoverflow.com/questions/5963266/call-c-function-from-java)\n\n```java\nclass HelloWorld {\n    private native void print();  // 声明c方法\n\n    public static void main(String[] args) {\n        new HelloWorld().print();\n    }\n\n    static {\n        System.loadLibrary(\"HelloWorld\");  // 加载HelloWorld.so库\n    }\n}\n```\n\n这里还包含怎么编译so库出来的问题，详细见上述链接。\n\n**兼容性识别关键点：native、System.loadLibrary关键字**\n\n### jna\n\nJNA方法：[jna/GettingStarted.md at master · java-native-access/jna · GitHub](https://github.com/java-native-access/jna/blob/master/www/GettingStarted.md)\n\n```java\npackage com.sun.jna.examples;\n\nimport com.sun.jna.Library;\nimport com.sun.jna.Native;\nimport com.sun.jna.Platform;\n\n/** Simple example of JNA interface mapping and usage. */\npublic class HelloWorld {\n\n    // This is the standard, stable way of mapping, which supports extensive\n    // customization and mapping of Java to native types.\n\n    public interface CLibrary extends Library {\n        CLibrary INSTANCE = (CLibrary)\n            Native.load((Platform.isWindows() ? \"msvcrt\" : \"c\"),\n                                CLibrary.class);\n\n        void printf(String format, Object... args);\n    }\n\n    public static void main(String[] args) {\n        CLibrary.INSTANCE.printf(\"Hello, World\\n\");\n        for (int i=0;i < args.length;i++) {\n            CLibrary.INSTANCE.printf(\"Argument %d: %s\\n\", i, args[i]);\n        }\n    }\n```\n\n**兼容性识别关键点：是否引用了jna依赖。**\n\n### 其他jvm系语言\n\n其他基于java虚拟机开发的语言调用so方法和上述类似，均通过java官方的JNI或JNA方法：\n\n- scala：[scala c integration - Stack Overflow](https://stackoverflow.com/questions/6286044/scala-c-integration)\n- kotlin：[Calling C function from Kotlin using JNI - Stack Overflow](https://stackoverflow.com/questions/72646387/calling-c-function-from-kotlin-using-jni)\n- groovy：[java - Call C API from Groovy - Stack Overflow](https://stackoverflow.com/questions/1105211/call-c-api-from-groovy?rq=4)\n- clojure：[Calling C++ from clojure - Stack Overflow](https://stackoverflow.com/questions/53359255/calling-c-from-clojure)\n\n\n\n## perl\n\nperl语言的特点跟python类似，也是一种脚本解释语言。\n\n### 代码调用c\n\nperl调用c的方法如下：[How do I call a C function from a Perl program? - Stack Overflow](https://stackoverflow.com/questions/15136890/how-do-i-call-a-c-function-from-a-perl-program)\n\n```perl\nuse Inline C => <<'__END_OF_C__';\n\n    int sum(int a, int b)\n    {\n        return (a+b);\n    }\n\n__END_OF_C__\n\nsay sum($x,$y);\n```\n\n\n\n## ruby\n\nruby也是一种解释型语言。\n\n### 代码调用c\n\nruby调用c的方式是通过`rb_define_method`方法：[How to create a Ruby extension in C in under 5 minutes (rubyinside.com)](http://www.rubyinside.com/how-to-create-a-ruby-extension-in-c-in-under-5-minutes-100.html)\n\n```ruby\n// Include the Ruby headers and goodies\n#include \"ruby.h\"\n\n// Defining a space for information and references about the module to be stored internally\nVALUE MyTest = Qnil;\n\n// Prototype for the initialization method - Ruby calls this, not you\nvoid Init_mytest();\n\n// Prototype for our method 'test1' - methods are prefixed by 'method_' here\nVALUE method_test1(VALUE self);\n\n// The initialization method for this module\nvoid Init_mytest() {\n\tMyTest = rb_define_module(\"MyTest\");  // 定义c模块\n\trb_define_method(MyTest, \"test1\", method_test1, 0);  // 定义c方法\n}\n\n// Our 'test1' method.. it simply returns a value of '10' for now.\nVALUE method_test1(VALUE self) {\n\tint x = 10;\n\treturn INT2NUM(x);\n}\n```\n\n\n\n### 代码调用so\n\nruby调用so的方式通过借助ffi：[Calling C shared libraries with ruby FFI (jertype.com)](https://www.jertype.com/calling-c-shared-library/)\n\n```ruby\nrequire 'ffi'\n\nmodule ConcatInterop\n  extend FFI::Library\n\n  ffi_lib './concat.so'\n  attach_function :concat, [:string, :string, :pointer], :void\nend\n```\n\n\n\n## lua\n\nlua也是一种解释型语言。\n\n### 代码调用c\n\nlua调用c的方式是通过`lua_CFunction`方法：[How would I make a C-function that I can call from Lua? - Stack Overflow](https://stackoverflow.com/questions/4190697/how-would-i-make-a-c-function-that-i-can-call-from-lua)\n\n### 代码调用so\n\nlua调用so的方式是通过ffi：[ffi - How to call a function in shared library using Lua - Stack Overflow](https://stackoverflow.com/questions/37876215/how-to-call-a-function-in-shared-library-using-lua)\n\n```lua\nlocal lib = ffi.load('some.dll')\nffi.cdef[[\n  void hello (void);\n]]\nlib.hello()\n```\n\n\n\n## php\n\nphp想要调用c或so的话，就不是在php内声明c函数签名的方式了，而是通过编写php extension：[Is it possible to call C code from php - Stack Overflow](https://stackoverflow.com/questions/3125388/is-it-possible-to-call-c-code-from-php)\n\n\n\n## c/c++/fortran/rust/go\n\n这些语言就都是编译型语言了，编译型语言一定是平台相关，意味着不存在出一个包就能达成跨平台的效果，故此类软件一定要做迁移。\n\n对于编译型语言，兼容性主要体现在编译过程，如：\n\n- 按照默认的readme、官方文档编译步骤，编译过程是否顺畅？\n- 是否存在某个平台相关选项导致编译失败？\n\n","slug":"编程语言兼容性","published":1,"updated":"2024-05-02T07:36:17.921Z","_id":"clvow18l5000oadpvfl37fi0s","comments":1,"photos":[],"content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文将讨论各类编程语言兼容性都是怎么引入的，这里的兼容性是指对硬件的兼容性、对不同架构平台芯片的兼容性。</p>\n<p><strong>什么是好的兼容性？</strong></p>\n<p>如果一款软件能够提供不同平台的二进制，或者一个二进制能够在不同平台上跑，那么说明这款软件的兼容性完备。</p>\n<p><strong>什么时候会出现兼容性问题？</strong></p>\n<ul>\n<li>当代码中硬编码了汇编语言</li>\n<li>当代码中调用了so库，而该so库还被打包到最终的可运行包里</li>\n<li>当代码中调用了so库，且该so库是由软件源码包中的c&#x2F;c++等待编译文件编译出来的</li>\n</ul>\n<p>以上这些情况均会导致软件与平台相关，进而导致软件必须提供不同平台编译版本才能满足软件在指定平台的可运行。</p>\n<p>只要软件和平台相关，那么当指定平台缺少该软件的预编译包时，整个上层应用在该平台上的安装就会失败，从而带来不好的兼容性体验。</p>\n<p><strong>那么，如何评价一款软件在给定平台的兼容性情况？</strong></p>\n<p>首先需要明确的是，兼容性达成情况是一个bool类型。软件是否兼容与软件有多么不兼容，后者会影响到你去做迁移适配的动作吗？难道软件严重不兼容就不做平台适配了？并不是的，对于给定的平台，我们想让软件跑起来，无论它具有多少不兼容代码，都得一一解决。唯有此，才能达成软件运行的目的。所以，评价软件兼容性是一个非黑即白的结论。</p>\n<p><strong>如何识别软件是否需要做兼容性？</strong></p>\n<ul>\n<li>分析源码</li>\n<li>直接在指定平台上编译运行</li>\n</ul>\n<p>针对第一点，以下挑选了top流行语言来列举各种可能存在的硬件兼容性情况。</p>\n<h2 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h2><h3 id=\"代码调用so\"><a href=\"#代码调用so\" class=\"headerlink\" title=\"代码调用so\"></a>代码调用so</h3><p>javascript调用so，使用node-ffi包：<a href=\"https://github.com/node-ffi/node-ffi\">node-ffi&#x2F;node-ffi: Node.js Foreign Function Interface (github.com)</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ffi = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ffi&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> libm = ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&#x27;libm&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;ceil&#x27;</span>: [ <span class=\"string\">&#x27;double&#x27;</span>, [ <span class=\"string\">&#x27;double&#x27;</span> ] ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">libm.<span class=\"title function_\">ceil</span>(<span class=\"number\">1.5</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// You can also access just functions in the current process by passing a null</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> current = ffi.<span class=\"title class_\">Library</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;atoi&#x27;</span>: [ <span class=\"string\">&#x27;int&#x27;</span>, [ <span class=\"string\">&#x27;string&#x27;</span> ] ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">current.<span class=\"title function_\">atoi</span>(<span class=\"string\">&#x27;1234&#x27;</span>); <span class=\"comment\">// 1234</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>兼容性识别关键点：检查编译后的包是否包含so。</strong></p>\n<h3 id=\"代码包含c-c\"><a href=\"#代码包含c-c\" class=\"headerlink\" title=\"代码包含c&#x2F;c++\"></a>代码包含c&#x2F;c++</h3><p>有些javascript包中带有其他编程语言，比如node-ffi：<a href=\"https://api.github.com/repos/node-ffi/node-ffi/languages\">https://api.github.com/repos/node-ffi/node-ffi/languages</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;JavaScript&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">65311</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;C++&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">35850</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;C&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1364</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Python&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">921</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，js包里面具有c&#x2F;c++编译型语言，这种包自然会导致平台兼容性问题。</p>\n<p><strong>兼容性识别关键点：检查源码中是否包含编译型语言。</strong></p>\n<h3 id=\"assembly技术\"><a href=\"#assembly技术\" class=\"headerlink\" title=\"assembly技术\"></a>assembly技术</h3><p>javascript运行会被浏览器翻译为assembly中间机器语言，这里的机器语言并非CPU相关，真正运行还要再转义一次。</p>\n<p>这篇文章以一种自定义的JS-ASM来描绘java assembly是怎么工作的：<a href=\"https://www.codeproject.com/Articles/417071/JavaScript-Assembler-Language-Specification-JS-ASM\">JavaScript Assembler Language Specification (JS-ASM) - CodeProject</a></p>\n<h3 id=\"npm包\"><a href=\"#npm包\" class=\"headerlink\" title=\"npm包\"></a>npm包</h3><p><strong>npm包背景知识</strong></p>\n<p>npm包制作和发布参考：<a href=\"https://www.freecodecamp.org/news/how-to-create-and-publish-your-first-npm-package/\">How to Create and Publish an NPM Package – a Step-by-Step Guide (freecodecamp.org)</a></p>\n<p>制作npm包有两种方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1：link形式</span></span><br><span class=\"line\">npm <span class=\"built_in\">link</span>  <span class=\"comment\"># 将当前npm工程本地全局发布</span></span><br><span class=\"line\">npm <span class=\"built_in\">link</span> &lt;package-name&gt;  <span class=\"comment\"># 在其他工程目录下通过该命令引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2：离线包形式</span></span><br><span class=\"line\">npm pack  <span class=\"comment\"># 将当前npm工程打包为一个tgz</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /path/to/&lt;package&gt;.tgz .  <span class=\"comment\"># 在其他工程目录下通过该命令集成</span></span><br><span class=\"line\"><span class=\"comment\"># 修改package.json，指定&lt;package-name&gt;: &lt;package&gt;.tgz</span></span><br></pre></td></tr></table></figure>\n\n<p>npm包安装过程解读：<a href=\"https://dev.to/shree_j/how-npm-works-internally-4012\">How npm install Works Internally? - DEV Community</a></p>\n<p>npm包工作的核心文件是package.json，该文件内定义了npm如何对该包进行操作，包括install、serve、test等。</p>\n<p>如果没有特别说明，包内index.js为npm包的入口（entrypoint），新包发布所能使用的功能函数统一从这里出口（export）</p>\n<p><strong>了解这些背景知识后，我们看下有哪些情况npm包在安装时会触发兼容性问题</strong></p>\n<p><strong>案例1：</strong><a href=\"https://forums.meteor.com/t/npm-install-2-8-2-fails-on-arm64-asks-to-upgrade-to-2-5-1-or-later/59177/4\">Npm install 2.8.2 fails on ARM64, asks to upgrade to 2.5.1 or later - core - Meteor.js forums</a></p>\n<p>该案例里npm包内具有平台检测硬编码，之所以做这类平台限制，是因为该包依赖了mongodb，而mongodb是平台相关，为适配arm，做了如下修复：</p>\n<p><a href=\"https://github.com/meteor/meteor/pull/12160/files#diff-e139871b4a22b32fdb9a795e1ac8ee683d848695e01d8b170e168534ef63d6c8\">Support ARM on Linux by aquinoit · Pull Request #12160 · meteor&#x2F;meteor (github.com)</a></p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%85%BC%E5%AE%B9%E6%80%A7/image-20230611113916798.png\" alt=\"image-20230611113916798\"></p>\n<p><strong>案例2：</strong><a href=\"https://github.com/twilio/twilio-video-app-react/issues/668\">Unable to <code>npm install</code> on M1 · Issue #668 · twilio&#x2F;twilio-video-app-react (github.com)</a></p>\n<p>该报错是因为npm安装过程中apt install chromium-browser命令执行失败导致，最后通过手动补全chromium依赖解决。</p>\n<p>结合以上案例可以得出，npm包在安装过程中体现的兼容性问题，取决于npm包安装脚本是否有外界依赖引入。</p>\n<p><strong>兼容性识别关键点：直接跑一遍npm install来检验</strong></p>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3><h4 id=\"代码调用c\"><a href=\"#代码调用c\" class=\"headerlink\" title=\"代码调用c\"></a>代码调用c</h4><p>这篇文章介绍了各种python调用c的方法，并给出了优劣势对比：<a href=\"https://realpython.com/python-bindings-overview/\">Python Bindings: Calling C or C++ From Python – Real Python</a></p>\n<p>ctypes内置包会处理所有跟c、so的交互：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># either</span></span><br><span class=\"line\">libc = cdll.LoadLibrary(<span class=\"string\">&quot;libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">libc = CDLL(<span class=\"string\">&quot;libc.so.6&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>兼容性识别关键点：识别源码中是否带有so名称，编译好的包是否具有so。</strong></p>\n<h3 id=\"wheel包\"><a href=\"#wheel包\" class=\"headerlink\" title=\"wheel包\"></a>wheel包</h3><p><strong>wheel包背景知识</strong></p>\n<p>和npm包一样，wheel包也有一个类似package.json的核心文件来承载包的元数据信息，该核心文件有一个演进史：</p>\n<p><a href=\"https://stackoverflow.com/questions/39484863/whats-the-difference-between-setup-py-and-setup-cfg-in-python-projects\">What’s the difference between setup.py and setup.cfg in python projects - Stack Overflow</a></p>\n<p>最开始是setup.py，然后是setup.cfg，再到现在则为pyproject.toml</p>\n<p>打包wheel的命令也有很多种，如build、wheel工具等，示例参考：<a href=\"https://towardsdatascience.com/how-to-package-your-python-code-df5a7739ab2e\">How to Create Python Packages | Towards Data Science</a></p>\n<p><strong>wheel包安装兼容性问题</strong></p>\n<p>安装过程触发本地编译，通过setup.py：</p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%85%BC%E5%AE%B9%E6%80%A7/image-20230611121349952.png\" alt=\"image-20230611121349952\"></p>\n<p>此时如果setup.py过程对平台有依赖，就会报错。</p>\n<p>同npm包，wheel包安装失败的原因仅有可能是引入了外部依赖。</p>\n<p><strong>兼容性识别关键点：直接跑一遍pip install来检验</strong></p>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><p>java调用so的方式是通过JNI或JNA。</p>\n<h3 id=\"jni\"><a href=\"#jni\" class=\"headerlink\" title=\"jni\"></a>jni</h3><p>JNI用法：<a href=\"https://stackoverflow.com/questions/5963266/call-c-function-from-java\">Call c function from Java - Stack Overflow</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;  <span class=\"comment\">// 声明c方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">HelloWorld</span>().print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.loadLibrary(<span class=\"string\">&quot;HelloWorld&quot;</span>);  <span class=\"comment\">// 加载HelloWorld.so库</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里还包含怎么编译so库出来的问题，详细见上述链接。</p>\n<p><strong>兼容性识别关键点：native、System.loadLibrary关键字</strong></p>\n<h3 id=\"jna\"><a href=\"#jna\" class=\"headerlink\" title=\"jna\"></a>jna</h3><p>JNA方法：<a href=\"https://github.com/java-native-access/jna/blob/master/www/GettingStarted.md\">jna&#x2F;GettingStarted.md at master · java-native-access&#x2F;jna · GitHub</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sun.jna.examples;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Library;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Native;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Platform;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Simple example of JNA interface mapping and usage. */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the standard, stable way of mapping, which supports extensive</span></span><br><span class=\"line\">    <span class=\"comment\">// customization and mapping of Java to native types.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CLibrary</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Library</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CLibrary</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> (CLibrary)</span><br><span class=\"line\">            Native.load((Platform.isWindows() ? <span class=\"string\">&quot;msvcrt&quot;</span> : <span class=\"string\">&quot;c&quot;</span>),</span><br><span class=\"line\">                                CLibrary.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">printf</span><span class=\"params\">(String format, Object... args)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        CLibrary.INSTANCE.printf(<span class=\"string\">&quot;Hello, World\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i &lt; args.length;i++) &#123;</span><br><span class=\"line\">            CLibrary.INSTANCE.printf(<span class=\"string\">&quot;Argument %d: %s\\n&quot;</span>, i, args[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>兼容性识别关键点：是否引用了jna依赖。</strong></p>\n<h3 id=\"其他jvm系语言\"><a href=\"#其他jvm系语言\" class=\"headerlink\" title=\"其他jvm系语言\"></a>其他jvm系语言</h3><p>其他基于java虚拟机开发的语言调用so方法和上述类似，均通过java官方的JNI或JNA方法：</p>\n<ul>\n<li>scala：<a href=\"https://stackoverflow.com/questions/6286044/scala-c-integration\">scala c integration - Stack Overflow</a></li>\n<li>kotlin：<a href=\"https://stackoverflow.com/questions/72646387/calling-c-function-from-kotlin-using-jni\">Calling C function from Kotlin using JNI - Stack Overflow</a></li>\n<li>groovy：<a href=\"https://stackoverflow.com/questions/1105211/call-c-api-from-groovy?rq=4\">java - Call C API from Groovy - Stack Overflow</a></li>\n<li>clojure：<a href=\"https://stackoverflow.com/questions/53359255/calling-c-from-clojure\">Calling C++ from clojure - Stack Overflow</a></li>\n</ul>\n<h2 id=\"perl\"><a href=\"#perl\" class=\"headerlink\" title=\"perl\"></a>perl</h2><p>perl语言的特点跟python类似，也是一种脚本解释语言。</p>\n<h3 id=\"代码调用c-1\"><a href=\"#代码调用c-1\" class=\"headerlink\" title=\"代码调用c\"></a>代码调用c</h3><p>perl调用c的方法如下：<a href=\"https://stackoverflow.com/questions/15136890/how-do-i-call-a-c-function-from-a-perl-program\">How do I call a C function from a Perl program? - Stack Overflow</a></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> Inline <span class=\"string\">C =&gt;</span> &lt;&lt;<span class=\"string\">&#x27;__END_OF_C__&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a+b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__END_OF_C_<span class=\"number\">_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">say</span> sum($x,$y);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ruby\"><a href=\"#ruby\" class=\"headerlink\" title=\"ruby\"></a>ruby</h2><p>ruby也是一种解释型语言。</p>\n<h3 id=\"代码调用c-2\"><a href=\"#代码调用c-2\" class=\"headerlink\" title=\"代码调用c\"></a>代码调用c</h3><p>ruby调用c的方式是通过<code>rb_define_method</code>方法：<a href=\"http://www.rubyinside.com/how-to-create-a-ruby-extension-in-c-in-under-5-minutes-100.html\">How to create a Ruby extension in C in under 5 minutes (rubyinside.com)</a></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"regexp\">/ Include the Ruby headers and goodies</span></span><br><span class=\"line\"><span class=\"regexp\">#include &quot;ruby.h&quot;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Defining a space for information and references about the module to be stored internally</span></span><br><span class=\"line\"><span class=\"regexp\">VALUE MyTest = Qnil;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Prototype for the initialization method - Ruby calls this, not you</span></span><br><span class=\"line\"><span class=\"regexp\">void Init_mytest();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Prototype for our method &#x27;test1&#x27; - methods are prefixed by &#x27;method_&#x27; here</span></span><br><span class=\"line\"><span class=\"regexp\">VALUE method_test1(VALUE self);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ The initialization method for this module</span></span><br><span class=\"line\"><span class=\"regexp\">void Init_mytest() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tMyTest = rb_define_module(&quot;MyTest&quot;);  /</span><span class=\"regexp\">/ 定义c模块</span></span><br><span class=\"line\"><span class=\"regexp\">\trb_define_method(MyTest, &quot;test1&quot;, method_test1, 0);  /</span><span class=\"regexp\">/ 定义c方法</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Our &#x27;test1&#x27; method.. it simply returns a value of &#x27;10&#x27; for now.</span></span><br><span class=\"line\"><span class=\"regexp\">VALUE method_test1(VALUE self) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tint x = 10;</span></span><br><span class=\"line\"><span class=\"regexp\">\treturn INT2NUM(x);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"代码调用so-1\"><a href=\"#代码调用so-1\" class=\"headerlink\" title=\"代码调用so\"></a>代码调用so</h3><p>ruby调用so的方式通过借助ffi：<a href=\"https://www.jertype.com/calling-c-shared-library/\">Calling C shared libraries with ruby FFI (jertype.com)</a></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;ffi&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">ConcatInterop</span></span><br><span class=\"line\">  <span class=\"keyword\">extend</span> <span class=\"variable constant_\">FFI</span><span class=\"symbol\">:</span><span class=\"symbol\">:Library</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ffi_lib <span class=\"string\">&#x27;./concat.so&#x27;</span></span><br><span class=\"line\">  attach_function <span class=\"symbol\">:concat</span>, [<span class=\"symbol\">:string</span>, <span class=\"symbol\">:string</span>, <span class=\"symbol\">:pointer</span>], <span class=\"symbol\">:void</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"lua\"><a href=\"#lua\" class=\"headerlink\" title=\"lua\"></a>lua</h2><p>lua也是一种解释型语言。</p>\n<h3 id=\"代码调用c-3\"><a href=\"#代码调用c-3\" class=\"headerlink\" title=\"代码调用c\"></a>代码调用c</h3><p>lua调用c的方式是通过<code>lua_CFunction</code>方法：<a href=\"https://stackoverflow.com/questions/4190697/how-would-i-make-a-c-function-that-i-can-call-from-lua\">How would I make a C-function that I can call from Lua? - Stack Overflow</a></p>\n<h3 id=\"代码调用so-2\"><a href=\"#代码调用so-2\" class=\"headerlink\" title=\"代码调用so\"></a>代码调用so</h3><p>lua调用so的方式是通过ffi：<a href=\"https://stackoverflow.com/questions/37876215/how-to-call-a-function-in-shared-library-using-lua\">ffi - How to call a function in shared library using Lua - Stack Overflow</a></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> lib = ffi.<span class=\"built_in\">load</span>(<span class=\"string\">&#x27;some.dll&#x27;</span>)</span><br><span class=\"line\">ffi.cdef<span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">  void hello (void);</span></span><br><span class=\"line\"><span class=\"string\">]]</span></span><br><span class=\"line\">lib.hello()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h2><p>php想要调用c或so的话，就不是在php内声明c函数签名的方式了，而是通过编写php extension：<a href=\"https://stackoverflow.com/questions/3125388/is-it-possible-to-call-c-code-from-php\">Is it possible to call C code from php - Stack Overflow</a></p>\n<h2 id=\"c-c-fortran-rust-go\"><a href=\"#c-c-fortran-rust-go\" class=\"headerlink\" title=\"c&#x2F;c++&#x2F;fortran&#x2F;rust&#x2F;go\"></a>c&#x2F;c++&#x2F;fortran&#x2F;rust&#x2F;go</h2><p>这些语言就都是编译型语言了，编译型语言一定是平台相关，意味着不存在出一个包就能达成跨平台的效果，故此类软件一定要做迁移。</p>\n<p>对于编译型语言，兼容性主要体现在编译过程，如：</p>\n<ul>\n<li>按照默认的readme、官方文档编译步骤，编译过程是否顺畅？</li>\n<li>是否存在某个平台相关选项导致编译失败？</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文将讨论各类编程语言兼容性都是怎么引入的，这里的兼容性是指对硬件的兼容性、对不同架构平台芯片的兼容性。</p>\n<p><strong>什么是好的兼容性？</strong></p>\n<p>如果一款软件能够提供不同平台的二进制，或者一个二进制能够在不同平台上跑，那么说明这款软件的兼容性完备。</p>\n<p><strong>什么时候会出现兼容性问题？</strong></p>\n<ul>\n<li>当代码中硬编码了汇编语言</li>\n<li>当代码中调用了so库，而该so库还被打包到最终的可运行包里</li>\n<li>当代码中调用了so库，且该so库是由软件源码包中的c&#x2F;c++等待编译文件编译出来的</li>\n</ul>\n<p>以上这些情况均会导致软件与平台相关，进而导致软件必须提供不同平台编译版本才能满足软件在指定平台的可运行。</p>\n<p>只要软件和平台相关，那么当指定平台缺少该软件的预编译包时，整个上层应用在该平台上的安装就会失败，从而带来不好的兼容性体验。</p>\n<p><strong>那么，如何评价一款软件在给定平台的兼容性情况？</strong></p>\n<p>首先需要明确的是，兼容性达成情况是一个bool类型。软件是否兼容与软件有多么不兼容，后者会影响到你去做迁移适配的动作吗？难道软件严重不兼容就不做平台适配了？并不是的，对于给定的平台，我们想让软件跑起来，无论它具有多少不兼容代码，都得一一解决。唯有此，才能达成软件运行的目的。所以，评价软件兼容性是一个非黑即白的结论。</p>\n<p><strong>如何识别软件是否需要做兼容性？</strong></p>\n<ul>\n<li>分析源码</li>\n<li>直接在指定平台上编译运行</li>\n</ul>\n<p>针对第一点，以下挑选了top流行语言来列举各种可能存在的硬件兼容性情况。</p>\n<h2 id=\"javascript\"><a href=\"#javascript\" class=\"headerlink\" title=\"javascript\"></a>javascript</h2><h3 id=\"代码调用so\"><a href=\"#代码调用so\" class=\"headerlink\" title=\"代码调用so\"></a>代码调用so</h3><p>javascript调用so，使用node-ffi包：<a href=\"https://github.com/node-ffi/node-ffi\">node-ffi&#x2F;node-ffi: Node.js Foreign Function Interface (github.com)</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ffi = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ffi&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> libm = ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&#x27;libm&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;ceil&#x27;</span>: [ <span class=\"string\">&#x27;double&#x27;</span>, [ <span class=\"string\">&#x27;double&#x27;</span> ] ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">libm.<span class=\"title function_\">ceil</span>(<span class=\"number\">1.5</span>); <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// You can also access just functions in the current process by passing a null</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> current = ffi.<span class=\"title class_\">Library</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">  <span class=\"string\">&#x27;atoi&#x27;</span>: [ <span class=\"string\">&#x27;int&#x27;</span>, [ <span class=\"string\">&#x27;string&#x27;</span> ] ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">current.<span class=\"title function_\">atoi</span>(<span class=\"string\">&#x27;1234&#x27;</span>); <span class=\"comment\">// 1234</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>兼容性识别关键点：检查编译后的包是否包含so。</strong></p>\n<h3 id=\"代码包含c-c\"><a href=\"#代码包含c-c\" class=\"headerlink\" title=\"代码包含c&#x2F;c++\"></a>代码包含c&#x2F;c++</h3><p>有些javascript包中带有其他编程语言，比如node-ffi：<a href=\"https://api.github.com/repos/node-ffi/node-ffi/languages\">https://api.github.com/repos/node-ffi/node-ffi/languages</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;JavaScript&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">65311</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;C++&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">35850</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;C&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1364</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Python&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">921</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到，js包里面具有c&#x2F;c++编译型语言，这种包自然会导致平台兼容性问题。</p>\n<p><strong>兼容性识别关键点：检查源码中是否包含编译型语言。</strong></p>\n<h3 id=\"assembly技术\"><a href=\"#assembly技术\" class=\"headerlink\" title=\"assembly技术\"></a>assembly技术</h3><p>javascript运行会被浏览器翻译为assembly中间机器语言，这里的机器语言并非CPU相关，真正运行还要再转义一次。</p>\n<p>这篇文章以一种自定义的JS-ASM来描绘java assembly是怎么工作的：<a href=\"https://www.codeproject.com/Articles/417071/JavaScript-Assembler-Language-Specification-JS-ASM\">JavaScript Assembler Language Specification (JS-ASM) - CodeProject</a></p>\n<h3 id=\"npm包\"><a href=\"#npm包\" class=\"headerlink\" title=\"npm包\"></a>npm包</h3><p><strong>npm包背景知识</strong></p>\n<p>npm包制作和发布参考：<a href=\"https://www.freecodecamp.org/news/how-to-create-and-publish-your-first-npm-package/\">How to Create and Publish an NPM Package – a Step-by-Step Guide (freecodecamp.org)</a></p>\n<p>制作npm包有两种方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 方式1：link形式</span></span><br><span class=\"line\">npm <span class=\"built_in\">link</span>  <span class=\"comment\"># 将当前npm工程本地全局发布</span></span><br><span class=\"line\">npm <span class=\"built_in\">link</span> &lt;package-name&gt;  <span class=\"comment\"># 在其他工程目录下通过该命令引用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 方式2：离线包形式</span></span><br><span class=\"line\">npm pack  <span class=\"comment\"># 将当前npm工程打包为一个tgz</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> /path/to/&lt;package&gt;.tgz .  <span class=\"comment\"># 在其他工程目录下通过该命令集成</span></span><br><span class=\"line\"><span class=\"comment\"># 修改package.json，指定&lt;package-name&gt;: &lt;package&gt;.tgz</span></span><br></pre></td></tr></table></figure>\n\n<p>npm包安装过程解读：<a href=\"https://dev.to/shree_j/how-npm-works-internally-4012\">How npm install Works Internally? - DEV Community</a></p>\n<p>npm包工作的核心文件是package.json，该文件内定义了npm如何对该包进行操作，包括install、serve、test等。</p>\n<p>如果没有特别说明，包内index.js为npm包的入口（entrypoint），新包发布所能使用的功能函数统一从这里出口（export）</p>\n<p><strong>了解这些背景知识后，我们看下有哪些情况npm包在安装时会触发兼容性问题</strong></p>\n<p><strong>案例1：</strong><a href=\"https://forums.meteor.com/t/npm-install-2-8-2-fails-on-arm64-asks-to-upgrade-to-2-5-1-or-later/59177/4\">Npm install 2.8.2 fails on ARM64, asks to upgrade to 2.5.1 or later - core - Meteor.js forums</a></p>\n<p>该案例里npm包内具有平台检测硬编码，之所以做这类平台限制，是因为该包依赖了mongodb，而mongodb是平台相关，为适配arm，做了如下修复：</p>\n<p><a href=\"https://github.com/meteor/meteor/pull/12160/files#diff-e139871b4a22b32fdb9a795e1ac8ee683d848695e01d8b170e168534ef63d6c8\">Support ARM on Linux by aquinoit · Pull Request #12160 · meteor&#x2F;meteor (github.com)</a></p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%85%BC%E5%AE%B9%E6%80%A7/image-20230611113916798.png\" alt=\"image-20230611113916798\"></p>\n<p><strong>案例2：</strong><a href=\"https://github.com/twilio/twilio-video-app-react/issues/668\">Unable to <code>npm install</code> on M1 · Issue #668 · twilio&#x2F;twilio-video-app-react (github.com)</a></p>\n<p>该报错是因为npm安装过程中apt install chromium-browser命令执行失败导致，最后通过手动补全chromium依赖解决。</p>\n<p>结合以上案例可以得出，npm包在安装过程中体现的兼容性问题，取决于npm包安装脚本是否有外界依赖引入。</p>\n<p><strong>兼容性识别关键点：直接跑一遍npm install来检验</strong></p>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3><h4 id=\"代码调用c\"><a href=\"#代码调用c\" class=\"headerlink\" title=\"代码调用c\"></a>代码调用c</h4><p>这篇文章介绍了各种python调用c的方法，并给出了优劣势对比：<a href=\"https://realpython.com/python-bindings-overview/\">Python Bindings: Calling C or C++ From Python – Real Python</a></p>\n<p>ctypes内置包会处理所有跟c、so的交互：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\"># either</span></span><br><span class=\"line\">libc = cdll.LoadLibrary(<span class=\"string\">&quot;libc.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">libc = CDLL(<span class=\"string\">&quot;libc.so.6&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>兼容性识别关键点：识别源码中是否带有so名称，编译好的包是否具有so。</strong></p>\n<h3 id=\"wheel包\"><a href=\"#wheel包\" class=\"headerlink\" title=\"wheel包\"></a>wheel包</h3><p><strong>wheel包背景知识</strong></p>\n<p>和npm包一样，wheel包也有一个类似package.json的核心文件来承载包的元数据信息，该核心文件有一个演进史：</p>\n<p><a href=\"https://stackoverflow.com/questions/39484863/whats-the-difference-between-setup-py-and-setup-cfg-in-python-projects\">What’s the difference between setup.py and setup.cfg in python projects - Stack Overflow</a></p>\n<p>最开始是setup.py，然后是setup.cfg，再到现在则为pyproject.toml</p>\n<p>打包wheel的命令也有很多种，如build、wheel工具等，示例参考：<a href=\"https://towardsdatascience.com/how-to-package-your-python-code-df5a7739ab2e\">How to Create Python Packages | Towards Data Science</a></p>\n<p><strong>wheel包安装兼容性问题</strong></p>\n<p>安装过程触发本地编译，通过setup.py：</p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%85%BC%E5%AE%B9%E6%80%A7/image-20230611121349952.png\" alt=\"image-20230611121349952\"></p>\n<p>此时如果setup.py过程对平台有依赖，就会报错。</p>\n<p>同npm包，wheel包安装失败的原因仅有可能是引入了外部依赖。</p>\n<p><strong>兼容性识别关键点：直接跑一遍pip install来检验</strong></p>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><p>java调用so的方式是通过JNI或JNA。</p>\n<h3 id=\"jni\"><a href=\"#jni\" class=\"headerlink\" title=\"jni\"></a>jni</h3><p>JNI用法：<a href=\"https://stackoverflow.com/questions/5963266/call-c-function-from-java\">Call c function from Java - Stack Overflow</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">()</span>;  <span class=\"comment\">// 声明c方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">HelloWorld</span>().print();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.loadLibrary(<span class=\"string\">&quot;HelloWorld&quot;</span>);  <span class=\"comment\">// 加载HelloWorld.so库</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里还包含怎么编译so库出来的问题，详细见上述链接。</p>\n<p><strong>兼容性识别关键点：native、System.loadLibrary关键字</strong></p>\n<h3 id=\"jna\"><a href=\"#jna\" class=\"headerlink\" title=\"jna\"></a>jna</h3><p>JNA方法：<a href=\"https://github.com/java-native-access/jna/blob/master/www/GettingStarted.md\">jna&#x2F;GettingStarted.md at master · java-native-access&#x2F;jna · GitHub</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sun.jna.examples;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Library;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Native;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.sun.jna.Platform;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Simple example of JNA interface mapping and usage. */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This is the standard, stable way of mapping, which supports extensive</span></span><br><span class=\"line\">    <span class=\"comment\">// customization and mapping of Java to native types.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">CLibrary</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Library</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CLibrary</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> (CLibrary)</span><br><span class=\"line\">            Native.load((Platform.isWindows() ? <span class=\"string\">&quot;msvcrt&quot;</span> : <span class=\"string\">&quot;c&quot;</span>),</span><br><span class=\"line\">                                CLibrary.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">void</span> <span class=\"title function_\">printf</span><span class=\"params\">(String format, Object... args)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        CLibrary.INSTANCE.printf(<span class=\"string\">&quot;Hello, World\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i &lt; args.length;i++) &#123;</span><br><span class=\"line\">            CLibrary.INSTANCE.printf(<span class=\"string\">&quot;Argument %d: %s\\n&quot;</span>, i, args[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>兼容性识别关键点：是否引用了jna依赖。</strong></p>\n<h3 id=\"其他jvm系语言\"><a href=\"#其他jvm系语言\" class=\"headerlink\" title=\"其他jvm系语言\"></a>其他jvm系语言</h3><p>其他基于java虚拟机开发的语言调用so方法和上述类似，均通过java官方的JNI或JNA方法：</p>\n<ul>\n<li>scala：<a href=\"https://stackoverflow.com/questions/6286044/scala-c-integration\">scala c integration - Stack Overflow</a></li>\n<li>kotlin：<a href=\"https://stackoverflow.com/questions/72646387/calling-c-function-from-kotlin-using-jni\">Calling C function from Kotlin using JNI - Stack Overflow</a></li>\n<li>groovy：<a href=\"https://stackoverflow.com/questions/1105211/call-c-api-from-groovy?rq=4\">java - Call C API from Groovy - Stack Overflow</a></li>\n<li>clojure：<a href=\"https://stackoverflow.com/questions/53359255/calling-c-from-clojure\">Calling C++ from clojure - Stack Overflow</a></li>\n</ul>\n<h2 id=\"perl\"><a href=\"#perl\" class=\"headerlink\" title=\"perl\"></a>perl</h2><p>perl语言的特点跟python类似，也是一种脚本解释语言。</p>\n<h3 id=\"代码调用c-1\"><a href=\"#代码调用c-1\" class=\"headerlink\" title=\"代码调用c\"></a>代码调用c</h3><p>perl调用c的方法如下：<a href=\"https://stackoverflow.com/questions/15136890/how-do-i-call-a-c-function-from-a-perl-program\">How do I call a C function from a Perl program? - Stack Overflow</a></p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> Inline <span class=\"string\">C =&gt;</span> &lt;&lt;<span class=\"string\">&#x27;__END_OF_C__&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a+b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__END_OF_C_<span class=\"number\">_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">say</span> sum($x,$y);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ruby\"><a href=\"#ruby\" class=\"headerlink\" title=\"ruby\"></a>ruby</h2><p>ruby也是一种解释型语言。</p>\n<h3 id=\"代码调用c-2\"><a href=\"#代码调用c-2\" class=\"headerlink\" title=\"代码调用c\"></a>代码调用c</h3><p>ruby调用c的方式是通过<code>rb_define_method</code>方法：<a href=\"http://www.rubyinside.com/how-to-create-a-ruby-extension-in-c-in-under-5-minutes-100.html\">How to create a Ruby extension in C in under 5 minutes (rubyinside.com)</a></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"regexp\">/ Include the Ruby headers and goodies</span></span><br><span class=\"line\"><span class=\"regexp\">#include &quot;ruby.h&quot;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Defining a space for information and references about the module to be stored internally</span></span><br><span class=\"line\"><span class=\"regexp\">VALUE MyTest = Qnil;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Prototype for the initialization method - Ruby calls this, not you</span></span><br><span class=\"line\"><span class=\"regexp\">void Init_mytest();</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Prototype for our method &#x27;test1&#x27; - methods are prefixed by &#x27;method_&#x27; here</span></span><br><span class=\"line\"><span class=\"regexp\">VALUE method_test1(VALUE self);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ The initialization method for this module</span></span><br><span class=\"line\"><span class=\"regexp\">void Init_mytest() &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tMyTest = rb_define_module(&quot;MyTest&quot;);  /</span><span class=\"regexp\">/ 定义c模块</span></span><br><span class=\"line\"><span class=\"regexp\">\trb_define_method(MyTest, &quot;test1&quot;, method_test1, 0);  /</span><span class=\"regexp\">/ 定义c方法</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">/</span><span class=\"regexp\">/ Our &#x27;test1&#x27; method.. it simply returns a value of &#x27;10&#x27; for now.</span></span><br><span class=\"line\"><span class=\"regexp\">VALUE method_test1(VALUE self) &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">\tint x = 10;</span></span><br><span class=\"line\"><span class=\"regexp\">\treturn INT2NUM(x);</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"代码调用so-1\"><a href=\"#代码调用so-1\" class=\"headerlink\" title=\"代码调用so\"></a>代码调用so</h3><p>ruby调用so的方式通过借助ffi：<a href=\"https://www.jertype.com/calling-c-shared-library/\">Calling C shared libraries with ruby FFI (jertype.com)</a></p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">&#x27;ffi&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> <span class=\"title class_\">ConcatInterop</span></span><br><span class=\"line\">  <span class=\"keyword\">extend</span> <span class=\"variable constant_\">FFI</span><span class=\"symbol\">:</span><span class=\"symbol\">:Library</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ffi_lib <span class=\"string\">&#x27;./concat.so&#x27;</span></span><br><span class=\"line\">  attach_function <span class=\"symbol\">:concat</span>, [<span class=\"symbol\">:string</span>, <span class=\"symbol\">:string</span>, <span class=\"symbol\">:pointer</span>], <span class=\"symbol\">:void</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"lua\"><a href=\"#lua\" class=\"headerlink\" title=\"lua\"></a>lua</h2><p>lua也是一种解释型语言。</p>\n<h3 id=\"代码调用c-3\"><a href=\"#代码调用c-3\" class=\"headerlink\" title=\"代码调用c\"></a>代码调用c</h3><p>lua调用c的方式是通过<code>lua_CFunction</code>方法：<a href=\"https://stackoverflow.com/questions/4190697/how-would-i-make-a-c-function-that-i-can-call-from-lua\">How would I make a C-function that I can call from Lua? - Stack Overflow</a></p>\n<h3 id=\"代码调用so-2\"><a href=\"#代码调用so-2\" class=\"headerlink\" title=\"代码调用so\"></a>代码调用so</h3><p>lua调用so的方式是通过ffi：<a href=\"https://stackoverflow.com/questions/37876215/how-to-call-a-function-in-shared-library-using-lua\">ffi - How to call a function in shared library using Lua - Stack Overflow</a></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> lib = ffi.<span class=\"built_in\">load</span>(<span class=\"string\">&#x27;some.dll&#x27;</span>)</span><br><span class=\"line\">ffi.cdef<span class=\"string\">[[</span></span><br><span class=\"line\"><span class=\"string\">  void hello (void);</span></span><br><span class=\"line\"><span class=\"string\">]]</span></span><br><span class=\"line\">lib.hello()</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"php\"><a href=\"#php\" class=\"headerlink\" title=\"php\"></a>php</h2><p>php想要调用c或so的话，就不是在php内声明c函数签名的方式了，而是通过编写php extension：<a href=\"https://stackoverflow.com/questions/3125388/is-it-possible-to-call-c-code-from-php\">Is it possible to call C code from php - Stack Overflow</a></p>\n<h2 id=\"c-c-fortran-rust-go\"><a href=\"#c-c-fortran-rust-go\" class=\"headerlink\" title=\"c&#x2F;c++&#x2F;fortran&#x2F;rust&#x2F;go\"></a>c&#x2F;c++&#x2F;fortran&#x2F;rust&#x2F;go</h2><p>这些语言就都是编译型语言了，编译型语言一定是平台相关，意味着不存在出一个包就能达成跨平台的效果，故此类软件一定要做迁移。</p>\n<p>对于编译型语言，兼容性主要体现在编译过程，如：</p>\n<ul>\n<li>按照默认的readme、官方文档编译步骤，编译过程是否顺畅？</li>\n<li>是否存在某个平台相关选项导致编译失败？</li>\n</ul>\n"},{"layout":"post","title":"编程语言源","date":"2023-09-02T15:00:02.000Z","_content":"\n\n## 概述\n\n本文探索不同编程语言都是如何管理其依赖包的，如何做到快速安装使用？如何为其构建的源做贡献？以及，如果想自定义一个第三方包管理，怎么做？\n\n## python\n\n### 自定义包上传官方源\n\n自定义包上传到pypi的教程：[Packaging Python Projects — Python Packaging User Guide](https://packaging.python.org/en/latest/tutorials/packaging-projects/)\n\n通过twine命令。\n\n\n\n有两点需要注意：\n\n1、需要设置2FA验证后才能生成token。\n\n什么是2FA验证：类似一种动态口令，需要手机扫二维码，获得口令码，再输入验证。\n\n腾讯小程序有一个比较好用的： Authentic\n\n2、如果遇到上传失败，提示403的情况，检查包名是否跟其他人重复：\n\n```bash\nERROR    HTTPError: 403 Forbidden from https://test.pypi.org/legacy/               \n         The user 'wutengda' isn't allowed to upload to project                    \n         'example-package-testing'. See https://test.pypi.org/help/#project-name   \n         for more information. \n```\n\n\n\n上传成功后，就可以使用该命令安装：\n\n```bash\n(venv) wutengda@wutengda:~/packaging_tutorial$ pip install example-package-wutengda\n \nCollecting example-package-wutengda\n  Downloading example_package_wutengda-0.0.1-py3-none-any.whl (2.7 kB)\nInstalling collected packages: example-package-wutengda\nSuccessfully installed example-package-wutengda-0.0.1\n```\n\n\n\n场景思考：\n\n对于pytorch，在arm上直接使用报没有和cuda联合编译，导致运行失败的情况。此时我们手动编译构建了一个可用的联合编译版本，如何提交到pypi？\n\n方式1：理想的，推动pytorch社区合入发布联合编译版本\n\n方式2：在pypi上开一个新账号，提交新包到该账号下。该方式弊端是，你没法用pytorch命名，而使用者想用的话，只能去适配你的名称\n\n方式3：新建一个私有pypi，将联合编译版本提交到这里。该方式需考虑：\n\n- 是否允许采用pytorch命名？\n- 当联合编译版本依赖其他包时，是否允许跨仓库关联解决？\n\n\n\n### 自定义私有源\n\n参考：[Setting up a Private PyPI Server](https://testdriven.io/blog/private-pypi/)\n\n安装pypiserver\n\n```bash\npip install pypiserver\ncd <dir-for-host-pypi>\npypi-server run -a . -P .\n```\n\n拉起成功后，可登录：localhost:8080\n\n`-a . -P .`表示不需要登录就可以上传包，只要在上传时保持账号密码为空即可。\n\n在没有指定目录时，上传的包会自动放到$HOME/packages目录下，如果该目录没有提前创建，上传会失败。\n\n上传成功后，即可访问http://localhost:8080/simple查看已上传的包。\n\n\n\n如果A包在自定义的仓库，B包在官方pypi源，此时pip install的行为是什么样的？示例：\n\n```bash\n# requirements.txt\nexample-package-wutengda==0.0.1  # 在官方pypi源\nuse-example-priv==0.0.1  # 在本地localhost:8080/simple私有源\n```\n\n安装前清理cache：\n\n```bash\npip cache purge\n```\n\n此时执行：\n\n```bash\n(venv) wutengda@wutengda:~/test$ pip install --index-url http://localhost:8080 --trusted-host=localhost:8080 -r requirements.txt\nLooking in indexes: http://localhost:8080\nCollecting example-package-wutengda==0.0.1\n  Downloading example_package_wutengda-0.0.1-py3-none-any.whl (2.7 kB)\nDEPRECATION: The HTML index page being used (http://localhost:8080/simple/use-example-priv/) is not a proper HTML 5 document. This is in violation of PEP 503 which requires these pages to be well-formed HTML 5 documents. Please reach out to the owners of this index page, and ask them to update this index page to a valid HTML 5 document. pip 22.2 will enforce this behaviour change. Discussion can be found at https://github.com/pypa/pip/issues/10825\nCollecting use-example-priv==0.0.1\n  Downloading http://localhost:8080/packages/use_example_priv-0.0.1-py3-none-any.whl (2.7 kB)\nInstalling collected packages: use-example-priv, example-package-wutengda\nSuccessfully installed example-package-wutengda-0.0.1 use-example-priv-0.0.1\n```\n\n可以正常安装， 不过会有一个DEPRECATION。\n\n\n\n**兼容性结论：**\n\n私有pypi源内如果有包依赖到官方源，则pip能够处理这种关系，pip将首先在当前配置的私有源中查找，如果未找到，则默认回退到官方源中查找。\n\n\n\n## java\n\n### 自定义包上传maven源\n\n参考：[Maven – Maven Central Repository (apache.org)](https://maven.apache.org/repository/)\n\n为jar包生成gpgkey：[Working with PGP Signatures - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/requirements/gpg/#distributing-your-public-key)\n\n提交jar包到中央仓库：\n\n- apache项目都提交到这里：[Nexus Repository Manager (apache.org)](https://repository.apache.org/)\n\n- 其他项目提交到OSSRH：[OSSRH Guide - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/publish-guide/)\n\n对于自定义的包，一般往OSSRH提交。该提交必须首先要持有一个JIRA账号和项目ticket（也就是新建一个group id）\n\n对于私人项目，groupid可基于github命名，比如：io.github.stavewu（其他命名方式参考：[Choosing your Coordinates - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/requirements/coordinates/#choose-your-coordinates)）。提交new project后，还必须在自己的github下创建一个名为OSSRH-xxxxxx的仓库，完成后在对应OSSRH申请单下评论知会工作人员，通常是由机器人秒批的。\n\n这部分细节处理可参考：[发布 Jar 包到 Maven 中央仓库 – LOFFER – 一个可以fork的博客 (gitee.io)](https://index1024.gitee.io/xblog/release-jar-to-mvn-centeral-repo/)\n\n![image-20230929231952522](/images/编程语言源/image-20230929231952522.png)\n\n现在就可以通过jira账号登录OSSRH包管理网站：https://s01.oss.sonatype.org/\n\n准备jar包，pom.xml文件按照以下两个指南编写：\n\n- 最基本的包信息配置：[Requirements - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/requirements/#create-a-ticket-with-sonatype)\n- 用于一键上传到maven repository的配置：[Apache Maven - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/publish-maven/#performing-a-release-deployment)\n\n准备好后，使能编译：\n\n```bash\nmvn clean deploy\n```\n\n> java17版本在deploy阶段存在编译错误：[selenium webdriver - Unable to make field private final java.util.Comparator java.util.TreeMap.comparator accessible: java.base doesn't \"opens java.util\" to unnamed module - Stack Overflow](https://stackoverflow.com/questions/68974753/unable-to-make-field-private-final-java-util-comparator-java-util-treemap-compar)\n>\n> 可采用降版本为java8规避。\n\n如成功，将在OOSRH包管理网站上查询到staging profile信息：\n\n![image-20230930004122812](/images/编程语言源/image-20230930004122812.png)\n\n> 虽然官网写了：Upon release, your component will be published to Central: this typically occurs within 30 minutes, though updates to [search](https://search.maven.org/) can take up to four hours.\n>\n> 实际同步花个更长时间，可能大概两天，终于查到了我们要上传的包：\n>\n> ![image-20231001174057638](/images/编程语言源/image-20231001174057638.png)\n\n\n\n**兼容性结论：**\n\n1. maven central对group id有严格控制，必须要得到group id管理员许可才能够提交进去\n2. 如果想基于已有开源软件（如spark）合入问题修复的版本，如做了兼容性适配完善等，想提交到maven central的话，必定会收到group id权限限制，也即需要社区同意后才能合入，无法自行处理。\n\n\n\n### 自定义maven源\n\n自定义maven源可以使用sonatypes nexus：[Nexus！最受欢迎的仓库管理软件 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/544089278)\n\n从上一章节讨论：\n\n1. nexus是介于maven central和本地之间的中转仓库，所有提交的包都会先存在于nexus这里\n2. 有很多包管理网站基于nexus搭建，如OSSRH、apache基金会等\n\n该软件提供了图形化界面来上传包，支持除java以外的各种包类型，如npm等，详细包类型支持见[Uploading Components (sonatype.com)](https://help.sonatype.com/repomanager3/using-nexus-repository/uploading-components)。\n\nnexus本身是开源的：[GitHub - sonatype/nexus-public: Sonatype Nexus Repository Manager; Open-source codebase mirror](https://github.com/sonatype/nexus-public)\n\n\n\n## go\n\n参考：[Using Go Modules - The Go Programming Language](https://go.dev/blog/using-go-modules)\n\n类似maven这种包管理工具在go里面是go mod\n\ngo没有像maven一样有统一的中央仓库，go引入mod完全是靠各个包所在的网络链接来include\n\n以k8s为例，[k8s仓库](https://github.com/kubernetes/kubernetes)中存在一份go.mod，打开可以看到其require方式为url：\n\n```go\n// This is a generated file. Do not edit directly.\n// Ensure you've carefully read\n// https://git.k8s.io/community/contributors/devel/sig-architecture/vendor.md\n// Run hack/pin-dependency.sh to change pinned dependency versions.\n// Run hack/update-vendor.sh to update go.mod files and the vendor directory.\n\nmodule k8s.io/kubernetes\n\ngo 1.20\n\nrequire (\n\tbitbucket.org/bertimus9/systemstat v0.5.0\n\tgithub.com/Azure/azure-sdk-for-go v68.0.0+incompatible\n\tgithub.com/Azure/go-autorest/autorest v0.11.29\n\tgithub.com/Azure/go-autorest/autorest/adal v0.9.23\n\tgithub.com/GoogleCloudPlatform/k8s-cloud-provider v1.18.1-0.20220218231025-f11817397a1b\n\tgithub.com/JeffAshton/win_pdh v0.0.0-20161109143554-76bb4ee9f0ab\n\tgithub.com/Microsoft/go-winio v0.6.0\n\tgithub.com/Microsoft/hcsshim v0.8.25\n    ...\n```\n\n\n\n**兼容性结论：**\n\n对于兼容性来说，因为go本身没有中央仓库管理，因此如有定制的patch等，在合入go mod官方仓库前是可以通过rpm等系统包管理机制来承载。go本身最终编译生成的文件也是一个标准系统二进制文件。\n\n\n\n## js\n\n参考：\n\n- [Creating and publishing scoped public packages](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages)\n\n- [超详细 如何发布自己的 npm 包 - 掘金 (juejin.cn)](https://juejin.cn/post/7039140144250617887)\n\njs的包发布通过npm即可完成，js的包也分两种，私人的和组织的，通过scope的表达方式进行（示例：`@xxx/hello-world`），这里的scope其实等价于namespace，用于预防和其他同名包冲突。不是所有的包都需要声明scope，比如vue。私人也可以发一些不带scope的包，比如shanglv-utils。\n\n因为在npm发布时要求必须要首先登录npm：`npm login`，所以不会出现私人包覆盖官方包的情况。\n\n\n\n**兼容性结论：**\n\nnpm发布包的机制和python基本一致，对于官方包，当官方包已经占位的情况下，我们无法去覆盖它，如有类型兼容性的patch需要合入，只有一种方式，就是通过包官方仓库接纳。\n\n\n\n## rust\n\nrust是有中央仓库的：[crates.io: Rust Package Registry](https://crates.io/)\n\n\n\n## ruby\n\nruby也有中央仓库托管各种包：[RubyGems.org](https://rubygems.org/)\n\n\n","source":"_posts/编程语言源.md","raw":"---\nlayout: post\ntitle:  \"编程语言源\"\ndate:   2023-09-02 23:00:02 +0800\ncategories: 生态\ntag: 兼容性\n---\n\n\n## 概述\n\n本文探索不同编程语言都是如何管理其依赖包的，如何做到快速安装使用？如何为其构建的源做贡献？以及，如果想自定义一个第三方包管理，怎么做？\n\n## python\n\n### 自定义包上传官方源\n\n自定义包上传到pypi的教程：[Packaging Python Projects — Python Packaging User Guide](https://packaging.python.org/en/latest/tutorials/packaging-projects/)\n\n通过twine命令。\n\n\n\n有两点需要注意：\n\n1、需要设置2FA验证后才能生成token。\n\n什么是2FA验证：类似一种动态口令，需要手机扫二维码，获得口令码，再输入验证。\n\n腾讯小程序有一个比较好用的： Authentic\n\n2、如果遇到上传失败，提示403的情况，检查包名是否跟其他人重复：\n\n```bash\nERROR    HTTPError: 403 Forbidden from https://test.pypi.org/legacy/               \n         The user 'wutengda' isn't allowed to upload to project                    \n         'example-package-testing'. See https://test.pypi.org/help/#project-name   \n         for more information. \n```\n\n\n\n上传成功后，就可以使用该命令安装：\n\n```bash\n(venv) wutengda@wutengda:~/packaging_tutorial$ pip install example-package-wutengda\n \nCollecting example-package-wutengda\n  Downloading example_package_wutengda-0.0.1-py3-none-any.whl (2.7 kB)\nInstalling collected packages: example-package-wutengda\nSuccessfully installed example-package-wutengda-0.0.1\n```\n\n\n\n场景思考：\n\n对于pytorch，在arm上直接使用报没有和cuda联合编译，导致运行失败的情况。此时我们手动编译构建了一个可用的联合编译版本，如何提交到pypi？\n\n方式1：理想的，推动pytorch社区合入发布联合编译版本\n\n方式2：在pypi上开一个新账号，提交新包到该账号下。该方式弊端是，你没法用pytorch命名，而使用者想用的话，只能去适配你的名称\n\n方式3：新建一个私有pypi，将联合编译版本提交到这里。该方式需考虑：\n\n- 是否允许采用pytorch命名？\n- 当联合编译版本依赖其他包时，是否允许跨仓库关联解决？\n\n\n\n### 自定义私有源\n\n参考：[Setting up a Private PyPI Server](https://testdriven.io/blog/private-pypi/)\n\n安装pypiserver\n\n```bash\npip install pypiserver\ncd <dir-for-host-pypi>\npypi-server run -a . -P .\n```\n\n拉起成功后，可登录：localhost:8080\n\n`-a . -P .`表示不需要登录就可以上传包，只要在上传时保持账号密码为空即可。\n\n在没有指定目录时，上传的包会自动放到$HOME/packages目录下，如果该目录没有提前创建，上传会失败。\n\n上传成功后，即可访问http://localhost:8080/simple查看已上传的包。\n\n\n\n如果A包在自定义的仓库，B包在官方pypi源，此时pip install的行为是什么样的？示例：\n\n```bash\n# requirements.txt\nexample-package-wutengda==0.0.1  # 在官方pypi源\nuse-example-priv==0.0.1  # 在本地localhost:8080/simple私有源\n```\n\n安装前清理cache：\n\n```bash\npip cache purge\n```\n\n此时执行：\n\n```bash\n(venv) wutengda@wutengda:~/test$ pip install --index-url http://localhost:8080 --trusted-host=localhost:8080 -r requirements.txt\nLooking in indexes: http://localhost:8080\nCollecting example-package-wutengda==0.0.1\n  Downloading example_package_wutengda-0.0.1-py3-none-any.whl (2.7 kB)\nDEPRECATION: The HTML index page being used (http://localhost:8080/simple/use-example-priv/) is not a proper HTML 5 document. This is in violation of PEP 503 which requires these pages to be well-formed HTML 5 documents. Please reach out to the owners of this index page, and ask them to update this index page to a valid HTML 5 document. pip 22.2 will enforce this behaviour change. Discussion can be found at https://github.com/pypa/pip/issues/10825\nCollecting use-example-priv==0.0.1\n  Downloading http://localhost:8080/packages/use_example_priv-0.0.1-py3-none-any.whl (2.7 kB)\nInstalling collected packages: use-example-priv, example-package-wutengda\nSuccessfully installed example-package-wutengda-0.0.1 use-example-priv-0.0.1\n```\n\n可以正常安装， 不过会有一个DEPRECATION。\n\n\n\n**兼容性结论：**\n\n私有pypi源内如果有包依赖到官方源，则pip能够处理这种关系，pip将首先在当前配置的私有源中查找，如果未找到，则默认回退到官方源中查找。\n\n\n\n## java\n\n### 自定义包上传maven源\n\n参考：[Maven – Maven Central Repository (apache.org)](https://maven.apache.org/repository/)\n\n为jar包生成gpgkey：[Working with PGP Signatures - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/requirements/gpg/#distributing-your-public-key)\n\n提交jar包到中央仓库：\n\n- apache项目都提交到这里：[Nexus Repository Manager (apache.org)](https://repository.apache.org/)\n\n- 其他项目提交到OSSRH：[OSSRH Guide - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/publish-guide/)\n\n对于自定义的包，一般往OSSRH提交。该提交必须首先要持有一个JIRA账号和项目ticket（也就是新建一个group id）\n\n对于私人项目，groupid可基于github命名，比如：io.github.stavewu（其他命名方式参考：[Choosing your Coordinates - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/requirements/coordinates/#choose-your-coordinates)）。提交new project后，还必须在自己的github下创建一个名为OSSRH-xxxxxx的仓库，完成后在对应OSSRH申请单下评论知会工作人员，通常是由机器人秒批的。\n\n这部分细节处理可参考：[发布 Jar 包到 Maven 中央仓库 – LOFFER – 一个可以fork的博客 (gitee.io)](https://index1024.gitee.io/xblog/release-jar-to-mvn-centeral-repo/)\n\n![image-20230929231952522](/images/编程语言源/image-20230929231952522.png)\n\n现在就可以通过jira账号登录OSSRH包管理网站：https://s01.oss.sonatype.org/\n\n准备jar包，pom.xml文件按照以下两个指南编写：\n\n- 最基本的包信息配置：[Requirements - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/requirements/#create-a-ticket-with-sonatype)\n- 用于一键上传到maven repository的配置：[Apache Maven - The Central Repository Documentation (sonatype.org)](https://central.sonatype.org/publish/publish-maven/#performing-a-release-deployment)\n\n准备好后，使能编译：\n\n```bash\nmvn clean deploy\n```\n\n> java17版本在deploy阶段存在编译错误：[selenium webdriver - Unable to make field private final java.util.Comparator java.util.TreeMap.comparator accessible: java.base doesn't \"opens java.util\" to unnamed module - Stack Overflow](https://stackoverflow.com/questions/68974753/unable-to-make-field-private-final-java-util-comparator-java-util-treemap-compar)\n>\n> 可采用降版本为java8规避。\n\n如成功，将在OOSRH包管理网站上查询到staging profile信息：\n\n![image-20230930004122812](/images/编程语言源/image-20230930004122812.png)\n\n> 虽然官网写了：Upon release, your component will be published to Central: this typically occurs within 30 minutes, though updates to [search](https://search.maven.org/) can take up to four hours.\n>\n> 实际同步花个更长时间，可能大概两天，终于查到了我们要上传的包：\n>\n> ![image-20231001174057638](/images/编程语言源/image-20231001174057638.png)\n\n\n\n**兼容性结论：**\n\n1. maven central对group id有严格控制，必须要得到group id管理员许可才能够提交进去\n2. 如果想基于已有开源软件（如spark）合入问题修复的版本，如做了兼容性适配完善等，想提交到maven central的话，必定会收到group id权限限制，也即需要社区同意后才能合入，无法自行处理。\n\n\n\n### 自定义maven源\n\n自定义maven源可以使用sonatypes nexus：[Nexus！最受欢迎的仓库管理软件 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/544089278)\n\n从上一章节讨论：\n\n1. nexus是介于maven central和本地之间的中转仓库，所有提交的包都会先存在于nexus这里\n2. 有很多包管理网站基于nexus搭建，如OSSRH、apache基金会等\n\n该软件提供了图形化界面来上传包，支持除java以外的各种包类型，如npm等，详细包类型支持见[Uploading Components (sonatype.com)](https://help.sonatype.com/repomanager3/using-nexus-repository/uploading-components)。\n\nnexus本身是开源的：[GitHub - sonatype/nexus-public: Sonatype Nexus Repository Manager; Open-source codebase mirror](https://github.com/sonatype/nexus-public)\n\n\n\n## go\n\n参考：[Using Go Modules - The Go Programming Language](https://go.dev/blog/using-go-modules)\n\n类似maven这种包管理工具在go里面是go mod\n\ngo没有像maven一样有统一的中央仓库，go引入mod完全是靠各个包所在的网络链接来include\n\n以k8s为例，[k8s仓库](https://github.com/kubernetes/kubernetes)中存在一份go.mod，打开可以看到其require方式为url：\n\n```go\n// This is a generated file. Do not edit directly.\n// Ensure you've carefully read\n// https://git.k8s.io/community/contributors/devel/sig-architecture/vendor.md\n// Run hack/pin-dependency.sh to change pinned dependency versions.\n// Run hack/update-vendor.sh to update go.mod files and the vendor directory.\n\nmodule k8s.io/kubernetes\n\ngo 1.20\n\nrequire (\n\tbitbucket.org/bertimus9/systemstat v0.5.0\n\tgithub.com/Azure/azure-sdk-for-go v68.0.0+incompatible\n\tgithub.com/Azure/go-autorest/autorest v0.11.29\n\tgithub.com/Azure/go-autorest/autorest/adal v0.9.23\n\tgithub.com/GoogleCloudPlatform/k8s-cloud-provider v1.18.1-0.20220218231025-f11817397a1b\n\tgithub.com/JeffAshton/win_pdh v0.0.0-20161109143554-76bb4ee9f0ab\n\tgithub.com/Microsoft/go-winio v0.6.0\n\tgithub.com/Microsoft/hcsshim v0.8.25\n    ...\n```\n\n\n\n**兼容性结论：**\n\n对于兼容性来说，因为go本身没有中央仓库管理，因此如有定制的patch等，在合入go mod官方仓库前是可以通过rpm等系统包管理机制来承载。go本身最终编译生成的文件也是一个标准系统二进制文件。\n\n\n\n## js\n\n参考：\n\n- [Creating and publishing scoped public packages](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages)\n\n- [超详细 如何发布自己的 npm 包 - 掘金 (juejin.cn)](https://juejin.cn/post/7039140144250617887)\n\njs的包发布通过npm即可完成，js的包也分两种，私人的和组织的，通过scope的表达方式进行（示例：`@xxx/hello-world`），这里的scope其实等价于namespace，用于预防和其他同名包冲突。不是所有的包都需要声明scope，比如vue。私人也可以发一些不带scope的包，比如shanglv-utils。\n\n因为在npm发布时要求必须要首先登录npm：`npm login`，所以不会出现私人包覆盖官方包的情况。\n\n\n\n**兼容性结论：**\n\nnpm发布包的机制和python基本一致，对于官方包，当官方包已经占位的情况下，我们无法去覆盖它，如有类型兼容性的patch需要合入，只有一种方式，就是通过包官方仓库接纳。\n\n\n\n## rust\n\nrust是有中央仓库的：[crates.io: Rust Package Registry](https://crates.io/)\n\n\n\n## ruby\n\nruby也有中央仓库托管各种包：[RubyGems.org](https://rubygems.org/)\n\n\n","slug":"编程语言源","published":1,"updated":"2024-05-02T07:37:10.382Z","_id":"clvow1hnb000radpv6bcte1r8","comments":1,"photos":[],"content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>本文探索不同编程语言都是如何管理其依赖包的，如何做到快速安装使用？如何为其构建的源做贡献？以及，如果想自定义一个第三方包管理，怎么做？</p>\n<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><h3 id=\"自定义包上传官方源\"><a href=\"#自定义包上传官方源\" class=\"headerlink\" title=\"自定义包上传官方源\"></a>自定义包上传官方源</h3><p>自定义包上传到pypi的教程：<a href=\"https://packaging.python.org/en/latest/tutorials/packaging-projects/\">Packaging Python Projects — Python Packaging User Guide</a></p>\n<p>通过twine命令。</p>\n<p>有两点需要注意：</p>\n<p>1、需要设置2FA验证后才能生成token。</p>\n<p>什么是2FA验证：类似一种动态口令，需要手机扫二维码，获得口令码，再输入验证。</p>\n<p>腾讯小程序有一个比较好用的： Authentic</p>\n<p>2、如果遇到上传失败，提示403的情况，检查包名是否跟其他人重复：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR    HTTPError: 403 Forbidden from https://test.pypi.org/legacy/               </span><br><span class=\"line\">         The user <span class=\"string\">&#x27;wutengda&#x27;</span> isn<span class=\"string\">&#x27;t allowed to upload to project                    </span></span><br><span class=\"line\"><span class=\"string\">         &#x27;</span>example-package-testing<span class=\"string\">&#x27;. See https://test.pypi.org/help/#project-name   </span></span><br><span class=\"line\"><span class=\"string\">         for more information. </span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>上传成功后，就可以使用该命令安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) wutengda@wutengda:~/packaging_tutorial$ pip install example-package-wutengda</span><br><span class=\"line\"> </span><br><span class=\"line\">Collecting example-package-wutengda</span><br><span class=\"line\">  Downloading example_package_wutengda-0.0.1-py3-none-any.whl (2.7 kB)</span><br><span class=\"line\">Installing collected packages: example-package-wutengda</span><br><span class=\"line\">Successfully installed example-package-wutengda-0.0.1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>场景思考：</p>\n<p>对于pytorch，在arm上直接使用报没有和cuda联合编译，导致运行失败的情况。此时我们手动编译构建了一个可用的联合编译版本，如何提交到pypi？</p>\n<p>方式1：理想的，推动pytorch社区合入发布联合编译版本</p>\n<p>方式2：在pypi上开一个新账号，提交新包到该账号下。该方式弊端是，你没法用pytorch命名，而使用者想用的话，只能去适配你的名称</p>\n<p>方式3：新建一个私有pypi，将联合编译版本提交到这里。该方式需考虑：</p>\n<ul>\n<li>是否允许采用pytorch命名？</li>\n<li>当联合编译版本依赖其他包时，是否允许跨仓库关联解决？</li>\n</ul>\n<h3 id=\"自定义私有源\"><a href=\"#自定义私有源\" class=\"headerlink\" title=\"自定义私有源\"></a>自定义私有源</h3><p>参考：<a href=\"https://testdriven.io/blog/private-pypi/\">Setting up a Private PyPI Server</a></p>\n<p>安装pypiserver</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pypiserver</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;dir-for-host-pypi&gt;</span><br><span class=\"line\">pypi-server run -a . -P .</span><br></pre></td></tr></table></figure>\n\n<p>拉起成功后，可登录：localhost:8080</p>\n<p><code>-a . -P .</code>表示不需要登录就可以上传包，只要在上传时保持账号密码为空即可。</p>\n<p>在没有指定目录时，上传的包会自动放到$HOME&#x2F;packages目录下，如果该目录没有提前创建，上传会失败。</p>\n<p>上传成功后，即可访问<a href=\"http://localhost:8080/simple%E6%9F%A5%E7%9C%8B%E5%B7%B2%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%8C%85%E3%80%82\">http://localhost:8080/simple查看已上传的包。</a></p>\n<p>如果A包在自定义的仓库，B包在官方pypi源，此时pip install的行为是什么样的？示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># requirements.txt</span></span><br><span class=\"line\">example-package-wutengda==0.0.1  <span class=\"comment\"># 在官方pypi源</span></span><br><span class=\"line\">use-example-priv==0.0.1  <span class=\"comment\"># 在本地localhost:8080/simple私有源</span></span><br></pre></td></tr></table></figure>\n\n<p>安装前清理cache：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip cache purge</span><br></pre></td></tr></table></figure>\n\n<p>此时执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) wutengda@wutengda:~/test$ pip install --index-url http://localhost:8080 --trusted-host=localhost:8080 -r requirements.txt</span><br><span class=\"line\">Looking <span class=\"keyword\">in</span> indexes: http://localhost:8080</span><br><span class=\"line\">Collecting example-package-wutengda==0.0.1</span><br><span class=\"line\">  Downloading example_package_wutengda-0.0.1-py3-none-any.whl (2.7 kB)</span><br><span class=\"line\">DEPRECATION: The HTML index page being used (http://localhost:8080/simple/use-example-priv/) is not a proper HTML 5 document. This is <span class=\"keyword\">in</span> violation of PEP 503 <span class=\"built_in\">which</span> requires these pages to be well-formed HTML 5 documents. Please reach out to the owners of this index page, and ask them to update this index page to a valid HTML 5 document. pip 22.2 will enforce this behaviour change. Discussion can be found at https://github.com/pypa/pip/issues/10825</span><br><span class=\"line\">Collecting use-example-priv==0.0.1</span><br><span class=\"line\">  Downloading http://localhost:8080/packages/use_example_priv-0.0.1-py3-none-any.whl (2.7 kB)</span><br><span class=\"line\">Installing collected packages: use-example-priv, example-package-wutengda</span><br><span class=\"line\">Successfully installed example-package-wutengda-0.0.1 use-example-priv-0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>可以正常安装， 不过会有一个DEPRECATION。</p>\n<p><strong>兼容性结论：</strong></p>\n<p>私有pypi源内如果有包依赖到官方源，则pip能够处理这种关系，pip将首先在当前配置的私有源中查找，如果未找到，则默认回退到官方源中查找。</p>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><h3 id=\"自定义包上传maven源\"><a href=\"#自定义包上传maven源\" class=\"headerlink\" title=\"自定义包上传maven源\"></a>自定义包上传maven源</h3><p>参考：<a href=\"https://maven.apache.org/repository/\">Maven – Maven Central Repository (apache.org)</a></p>\n<p>为jar包生成gpgkey：<a href=\"https://central.sonatype.org/publish/requirements/gpg/#distributing-your-public-key\">Working with PGP Signatures - The Central Repository Documentation (sonatype.org)</a></p>\n<p>提交jar包到中央仓库：</p>\n<ul>\n<li><p>apache项目都提交到这里：<a href=\"https://repository.apache.org/\">Nexus Repository Manager (apache.org)</a></p>\n</li>\n<li><p>其他项目提交到OSSRH：<a href=\"https://central.sonatype.org/publish/publish-guide/\">OSSRH Guide - The Central Repository Documentation (sonatype.org)</a></p>\n</li>\n</ul>\n<p>对于自定义的包，一般往OSSRH提交。该提交必须首先要持有一个JIRA账号和项目ticket（也就是新建一个group id）</p>\n<p>对于私人项目，groupid可基于github命名，比如：io.github.stavewu（其他命名方式参考：<a href=\"https://central.sonatype.org/publish/requirements/coordinates/#choose-your-coordinates\">Choosing your Coordinates - The Central Repository Documentation (sonatype.org)</a>）。提交new project后，还必须在自己的github下创建一个名为OSSRH-xxxxxx的仓库，完成后在对应OSSRH申请单下评论知会工作人员，通常是由机器人秒批的。</p>\n<p>这部分细节处理可参考：<a href=\"https://index1024.gitee.io/xblog/release-jar-to-mvn-centeral-repo/\">发布 Jar 包到 Maven 中央仓库 – LOFFER – 一个可以fork的博客 (gitee.io)</a></p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%BA%90/image-20230929231952522.png\" alt=\"image-20230929231952522\"></p>\n<p>现在就可以通过jira账号登录OSSRH包管理网站：<a href=\"https://s01.oss.sonatype.org/\">https://s01.oss.sonatype.org/</a></p>\n<p>准备jar包，pom.xml文件按照以下两个指南编写：</p>\n<ul>\n<li>最基本的包信息配置：<a href=\"https://central.sonatype.org/publish/requirements/#create-a-ticket-with-sonatype\">Requirements - The Central Repository Documentation (sonatype.org)</a></li>\n<li>用于一键上传到maven repository的配置：<a href=\"https://central.sonatype.org/publish/publish-maven/#performing-a-release-deployment\">Apache Maven - The Central Repository Documentation (sonatype.org)</a></li>\n</ul>\n<p>准备好后，使能编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean deploy</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>java17版本在deploy阶段存在编译错误：<a href=\"https://stackoverflow.com/questions/68974753/unable-to-make-field-private-final-java-util-comparator-java-util-treemap-compar\">selenium webdriver - Unable to make field private final java.util.Comparator java.util.TreeMap.comparator accessible: java.base doesn’t “opens java.util” to unnamed module - Stack Overflow</a></p>\n<p>可采用降版本为java8规避。</p>\n</blockquote>\n<p>如成功，将在OOSRH包管理网站上查询到staging profile信息：</p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%BA%90/image-20230930004122812.png\" alt=\"image-20230930004122812\"></p>\n<blockquote>\n<p>虽然官网写了：Upon release, your component will be published to Central: this typically occurs within 30 minutes, though updates to <a href=\"https://search.maven.org/\">search</a> can take up to four hours.</p>\n<p>实际同步花个更长时间，可能大概两天，终于查到了我们要上传的包：</p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%BA%90/image-20231001174057638.png\" alt=\"image-20231001174057638\"></p>\n</blockquote>\n<p><strong>兼容性结论：</strong></p>\n<ol>\n<li>maven central对group id有严格控制，必须要得到group id管理员许可才能够提交进去</li>\n<li>如果想基于已有开源软件（如spark）合入问题修复的版本，如做了兼容性适配完善等，想提交到maven central的话，必定会收到group id权限限制，也即需要社区同意后才能合入，无法自行处理。</li>\n</ol>\n<h3 id=\"自定义maven源\"><a href=\"#自定义maven源\" class=\"headerlink\" title=\"自定义maven源\"></a>自定义maven源</h3><p>自定义maven源可以使用sonatypes nexus：<a href=\"https://zhuanlan.zhihu.com/p/544089278\">Nexus！最受欢迎的仓库管理软件 - 知乎 (zhihu.com)</a></p>\n<p>从上一章节讨论：</p>\n<ol>\n<li>nexus是介于maven central和本地之间的中转仓库，所有提交的包都会先存在于nexus这里</li>\n<li>有很多包管理网站基于nexus搭建，如OSSRH、apache基金会等</li>\n</ol>\n<p>该软件提供了图形化界面来上传包，支持除java以外的各种包类型，如npm等，详细包类型支持见<a href=\"https://help.sonatype.com/repomanager3/using-nexus-repository/uploading-components\">Uploading Components (sonatype.com)</a>。</p>\n<p>nexus本身是开源的：<a href=\"https://github.com/sonatype/nexus-public\">GitHub - sonatype&#x2F;nexus-public: Sonatype Nexus Repository Manager; Open-source codebase mirror</a></p>\n<h2 id=\"go\"><a href=\"#go\" class=\"headerlink\" title=\"go\"></a>go</h2><p>参考：<a href=\"https://go.dev/blog/using-go-modules\">Using Go Modules - The Go Programming Language</a></p>\n<p>类似maven这种包管理工具在go里面是go mod</p>\n<p>go没有像maven一样有统一的中央仓库，go引入mod完全是靠各个包所在的网络链接来include</p>\n<p>以k8s为例，<a href=\"https://github.com/kubernetes/kubernetes\">k8s仓库</a>中存在一份go.mod，打开可以看到其require方式为url：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is a generated file. Do not edit directly.</span></span><br><span class=\"line\"><span class=\"comment\">// Ensure you&#x27;ve carefully read</span></span><br><span class=\"line\"><span class=\"comment\">// https://git.k8s.io/community/contributors/devel/sig-architecture/vendor.md</span></span><br><span class=\"line\"><span class=\"comment\">// Run hack/pin-dependency.sh to change pinned dependency versions.</span></span><br><span class=\"line\"><span class=\"comment\">// Run hack/update-vendor.sh to update go.mod files and the vendor directory.</span></span><br><span class=\"line\"></span><br><span class=\"line\">module k8s.io/kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"number\">1.20</span></span><br><span class=\"line\"></span><br><span class=\"line\">require (</span><br><span class=\"line\">\tbitbucket.org/bertimus9/systemstat v0<span class=\"number\">.5</span><span class=\"number\">.0</span></span><br><span class=\"line\">\tgithub.com/Azure/azure-sdk-<span class=\"keyword\">for</span>-<span class=\"keyword\">go</span> v68<span class=\"number\">.0</span><span class=\"number\">.0</span>+incompatible</span><br><span class=\"line\">\tgithub.com/Azure/<span class=\"keyword\">go</span>-autorest/autorest v0<span class=\"number\">.11</span><span class=\"number\">.29</span></span><br><span class=\"line\">\tgithub.com/Azure/<span class=\"keyword\">go</span>-autorest/autorest/adal v0<span class=\"number\">.9</span><span class=\"number\">.23</span></span><br><span class=\"line\">\tgithub.com/GoogleCloudPlatform/k8s-cloud-provider v1<span class=\"number\">.18</span><span class=\"number\">.1</span><span class=\"number\">-0.20220218231025</span>-f11817397a1b</span><br><span class=\"line\">\tgithub.com/JeffAshton/win_pdh v0<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-20161109143554</span><span class=\"number\">-76</span>bb4ee9f0ab</span><br><span class=\"line\">\tgithub.com/Microsoft/<span class=\"keyword\">go</span>-winio v0<span class=\"number\">.6</span><span class=\"number\">.0</span></span><br><span class=\"line\">\tgithub.com/Microsoft/hcsshim v0<span class=\"number\">.8</span><span class=\"number\">.25</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>兼容性结论：</strong></p>\n<p>对于兼容性来说，因为go本身没有中央仓库管理，因此如有定制的patch等，在合入go mod官方仓库前是可以通过rpm等系统包管理机制来承载。go本身最终编译生成的文件也是一个标准系统二进制文件。</p>\n<h2 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h2><p>参考：</p>\n<ul>\n<li><p><a href=\"https://docs.npmjs.com/creating-and-publishing-scoped-public-packages\">Creating and publishing scoped public packages</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/7039140144250617887\">超详细 如何发布自己的 npm 包 - 掘金 (juejin.cn)</a></p>\n</li>\n</ul>\n<p>js的包发布通过npm即可完成，js的包也分两种，私人的和组织的，通过scope的表达方式进行（示例：<code>@xxx/hello-world</code>），这里的scope其实等价于namespace，用于预防和其他同名包冲突。不是所有的包都需要声明scope，比如vue。私人也可以发一些不带scope的包，比如shanglv-utils。</p>\n<p>因为在npm发布时要求必须要首先登录npm：<code>npm login</code>，所以不会出现私人包覆盖官方包的情况。</p>\n<p><strong>兼容性结论：</strong></p>\n<p>npm发布包的机制和python基本一致，对于官方包，当官方包已经占位的情况下，我们无法去覆盖它，如有类型兼容性的patch需要合入，只有一种方式，就是通过包官方仓库接纳。</p>\n<h2 id=\"rust\"><a href=\"#rust\" class=\"headerlink\" title=\"rust\"></a>rust</h2><p>rust是有中央仓库的：<a href=\"https://crates.io/\">crates.io: Rust Package Registry</a></p>\n<h2 id=\"ruby\"><a href=\"#ruby\" class=\"headerlink\" title=\"ruby\"></a>ruby</h2><p>ruby也有中央仓库托管各种包：<a href=\"https://rubygems.org/\">RubyGems.org</a></p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>本文探索不同编程语言都是如何管理其依赖包的，如何做到快速安装使用？如何为其构建的源做贡献？以及，如果想自定义一个第三方包管理，怎么做？</p>\n<h2 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h2><h3 id=\"自定义包上传官方源\"><a href=\"#自定义包上传官方源\" class=\"headerlink\" title=\"自定义包上传官方源\"></a>自定义包上传官方源</h3><p>自定义包上传到pypi的教程：<a href=\"https://packaging.python.org/en/latest/tutorials/packaging-projects/\">Packaging Python Projects — Python Packaging User Guide</a></p>\n<p>通过twine命令。</p>\n<p>有两点需要注意：</p>\n<p>1、需要设置2FA验证后才能生成token。</p>\n<p>什么是2FA验证：类似一种动态口令，需要手机扫二维码，获得口令码，再输入验证。</p>\n<p>腾讯小程序有一个比较好用的： Authentic</p>\n<p>2、如果遇到上传失败，提示403的情况，检查包名是否跟其他人重复：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR    HTTPError: 403 Forbidden from https://test.pypi.org/legacy/               </span><br><span class=\"line\">         The user <span class=\"string\">&#x27;wutengda&#x27;</span> isn<span class=\"string\">&#x27;t allowed to upload to project                    </span></span><br><span class=\"line\"><span class=\"string\">         &#x27;</span>example-package-testing<span class=\"string\">&#x27;. See https://test.pypi.org/help/#project-name   </span></span><br><span class=\"line\"><span class=\"string\">         for more information. </span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>上传成功后，就可以使用该命令安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) wutengda@wutengda:~/packaging_tutorial$ pip install example-package-wutengda</span><br><span class=\"line\"> </span><br><span class=\"line\">Collecting example-package-wutengda</span><br><span class=\"line\">  Downloading example_package_wutengda-0.0.1-py3-none-any.whl (2.7 kB)</span><br><span class=\"line\">Installing collected packages: example-package-wutengda</span><br><span class=\"line\">Successfully installed example-package-wutengda-0.0.1</span><br></pre></td></tr></table></figure>\n\n\n\n<p>场景思考：</p>\n<p>对于pytorch，在arm上直接使用报没有和cuda联合编译，导致运行失败的情况。此时我们手动编译构建了一个可用的联合编译版本，如何提交到pypi？</p>\n<p>方式1：理想的，推动pytorch社区合入发布联合编译版本</p>\n<p>方式2：在pypi上开一个新账号，提交新包到该账号下。该方式弊端是，你没法用pytorch命名，而使用者想用的话，只能去适配你的名称</p>\n<p>方式3：新建一个私有pypi，将联合编译版本提交到这里。该方式需考虑：</p>\n<ul>\n<li>是否允许采用pytorch命名？</li>\n<li>当联合编译版本依赖其他包时，是否允许跨仓库关联解决？</li>\n</ul>\n<h3 id=\"自定义私有源\"><a href=\"#自定义私有源\" class=\"headerlink\" title=\"自定义私有源\"></a>自定义私有源</h3><p>参考：<a href=\"https://testdriven.io/blog/private-pypi/\">Setting up a Private PyPI Server</a></p>\n<p>安装pypiserver</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pypiserver</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;dir-for-host-pypi&gt;</span><br><span class=\"line\">pypi-server run -a . -P .</span><br></pre></td></tr></table></figure>\n\n<p>拉起成功后，可登录：localhost:8080</p>\n<p><code>-a . -P .</code>表示不需要登录就可以上传包，只要在上传时保持账号密码为空即可。</p>\n<p>在没有指定目录时，上传的包会自动放到$HOME&#x2F;packages目录下，如果该目录没有提前创建，上传会失败。</p>\n<p>上传成功后，即可访问<a href=\"http://localhost:8080/simple%E6%9F%A5%E7%9C%8B%E5%B7%B2%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%8C%85%E3%80%82\">http://localhost:8080/simple查看已上传的包。</a></p>\n<p>如果A包在自定义的仓库，B包在官方pypi源，此时pip install的行为是什么样的？示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># requirements.txt</span></span><br><span class=\"line\">example-package-wutengda==0.0.1  <span class=\"comment\"># 在官方pypi源</span></span><br><span class=\"line\">use-example-priv==0.0.1  <span class=\"comment\"># 在本地localhost:8080/simple私有源</span></span><br></pre></td></tr></table></figure>\n\n<p>安装前清理cache：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip cache purge</span><br></pre></td></tr></table></figure>\n\n<p>此时执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv) wutengda@wutengda:~/test$ pip install --index-url http://localhost:8080 --trusted-host=localhost:8080 -r requirements.txt</span><br><span class=\"line\">Looking <span class=\"keyword\">in</span> indexes: http://localhost:8080</span><br><span class=\"line\">Collecting example-package-wutengda==0.0.1</span><br><span class=\"line\">  Downloading example_package_wutengda-0.0.1-py3-none-any.whl (2.7 kB)</span><br><span class=\"line\">DEPRECATION: The HTML index page being used (http://localhost:8080/simple/use-example-priv/) is not a proper HTML 5 document. This is <span class=\"keyword\">in</span> violation of PEP 503 <span class=\"built_in\">which</span> requires these pages to be well-formed HTML 5 documents. Please reach out to the owners of this index page, and ask them to update this index page to a valid HTML 5 document. pip 22.2 will enforce this behaviour change. Discussion can be found at https://github.com/pypa/pip/issues/10825</span><br><span class=\"line\">Collecting use-example-priv==0.0.1</span><br><span class=\"line\">  Downloading http://localhost:8080/packages/use_example_priv-0.0.1-py3-none-any.whl (2.7 kB)</span><br><span class=\"line\">Installing collected packages: use-example-priv, example-package-wutengda</span><br><span class=\"line\">Successfully installed example-package-wutengda-0.0.1 use-example-priv-0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>可以正常安装， 不过会有一个DEPRECATION。</p>\n<p><strong>兼容性结论：</strong></p>\n<p>私有pypi源内如果有包依赖到官方源，则pip能够处理这种关系，pip将首先在当前配置的私有源中查找，如果未找到，则默认回退到官方源中查找。</p>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><h3 id=\"自定义包上传maven源\"><a href=\"#自定义包上传maven源\" class=\"headerlink\" title=\"自定义包上传maven源\"></a>自定义包上传maven源</h3><p>参考：<a href=\"https://maven.apache.org/repository/\">Maven – Maven Central Repository (apache.org)</a></p>\n<p>为jar包生成gpgkey：<a href=\"https://central.sonatype.org/publish/requirements/gpg/#distributing-your-public-key\">Working with PGP Signatures - The Central Repository Documentation (sonatype.org)</a></p>\n<p>提交jar包到中央仓库：</p>\n<ul>\n<li><p>apache项目都提交到这里：<a href=\"https://repository.apache.org/\">Nexus Repository Manager (apache.org)</a></p>\n</li>\n<li><p>其他项目提交到OSSRH：<a href=\"https://central.sonatype.org/publish/publish-guide/\">OSSRH Guide - The Central Repository Documentation (sonatype.org)</a></p>\n</li>\n</ul>\n<p>对于自定义的包，一般往OSSRH提交。该提交必须首先要持有一个JIRA账号和项目ticket（也就是新建一个group id）</p>\n<p>对于私人项目，groupid可基于github命名，比如：io.github.stavewu（其他命名方式参考：<a href=\"https://central.sonatype.org/publish/requirements/coordinates/#choose-your-coordinates\">Choosing your Coordinates - The Central Repository Documentation (sonatype.org)</a>）。提交new project后，还必须在自己的github下创建一个名为OSSRH-xxxxxx的仓库，完成后在对应OSSRH申请单下评论知会工作人员，通常是由机器人秒批的。</p>\n<p>这部分细节处理可参考：<a href=\"https://index1024.gitee.io/xblog/release-jar-to-mvn-centeral-repo/\">发布 Jar 包到 Maven 中央仓库 – LOFFER – 一个可以fork的博客 (gitee.io)</a></p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%BA%90/image-20230929231952522.png\" alt=\"image-20230929231952522\"></p>\n<p>现在就可以通过jira账号登录OSSRH包管理网站：<a href=\"https://s01.oss.sonatype.org/\">https://s01.oss.sonatype.org/</a></p>\n<p>准备jar包，pom.xml文件按照以下两个指南编写：</p>\n<ul>\n<li>最基本的包信息配置：<a href=\"https://central.sonatype.org/publish/requirements/#create-a-ticket-with-sonatype\">Requirements - The Central Repository Documentation (sonatype.org)</a></li>\n<li>用于一键上传到maven repository的配置：<a href=\"https://central.sonatype.org/publish/publish-maven/#performing-a-release-deployment\">Apache Maven - The Central Repository Documentation (sonatype.org)</a></li>\n</ul>\n<p>准备好后，使能编译：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean deploy</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>java17版本在deploy阶段存在编译错误：<a href=\"https://stackoverflow.com/questions/68974753/unable-to-make-field-private-final-java-util-comparator-java-util-treemap-compar\">selenium webdriver - Unable to make field private final java.util.Comparator java.util.TreeMap.comparator accessible: java.base doesn’t “opens java.util” to unnamed module - Stack Overflow</a></p>\n<p>可采用降版本为java8规避。</p>\n</blockquote>\n<p>如成功，将在OOSRH包管理网站上查询到staging profile信息：</p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%BA%90/image-20230930004122812.png\" alt=\"image-20230930004122812\"></p>\n<blockquote>\n<p>虽然官网写了：Upon release, your component will be published to Central: this typically occurs within 30 minutes, though updates to <a href=\"https://search.maven.org/\">search</a> can take up to four hours.</p>\n<p>实际同步花个更长时间，可能大概两天，终于查到了我们要上传的包：</p>\n<p><img src=\"/images/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%BA%90/image-20231001174057638.png\" alt=\"image-20231001174057638\"></p>\n</blockquote>\n<p><strong>兼容性结论：</strong></p>\n<ol>\n<li>maven central对group id有严格控制，必须要得到group id管理员许可才能够提交进去</li>\n<li>如果想基于已有开源软件（如spark）合入问题修复的版本，如做了兼容性适配完善等，想提交到maven central的话，必定会收到group id权限限制，也即需要社区同意后才能合入，无法自行处理。</li>\n</ol>\n<h3 id=\"自定义maven源\"><a href=\"#自定义maven源\" class=\"headerlink\" title=\"自定义maven源\"></a>自定义maven源</h3><p>自定义maven源可以使用sonatypes nexus：<a href=\"https://zhuanlan.zhihu.com/p/544089278\">Nexus！最受欢迎的仓库管理软件 - 知乎 (zhihu.com)</a></p>\n<p>从上一章节讨论：</p>\n<ol>\n<li>nexus是介于maven central和本地之间的中转仓库，所有提交的包都会先存在于nexus这里</li>\n<li>有很多包管理网站基于nexus搭建，如OSSRH、apache基金会等</li>\n</ol>\n<p>该软件提供了图形化界面来上传包，支持除java以外的各种包类型，如npm等，详细包类型支持见<a href=\"https://help.sonatype.com/repomanager3/using-nexus-repository/uploading-components\">Uploading Components (sonatype.com)</a>。</p>\n<p>nexus本身是开源的：<a href=\"https://github.com/sonatype/nexus-public\">GitHub - sonatype&#x2F;nexus-public: Sonatype Nexus Repository Manager; Open-source codebase mirror</a></p>\n<h2 id=\"go\"><a href=\"#go\" class=\"headerlink\" title=\"go\"></a>go</h2><p>参考：<a href=\"https://go.dev/blog/using-go-modules\">Using Go Modules - The Go Programming Language</a></p>\n<p>类似maven这种包管理工具在go里面是go mod</p>\n<p>go没有像maven一样有统一的中央仓库，go引入mod完全是靠各个包所在的网络链接来include</p>\n<p>以k8s为例，<a href=\"https://github.com/kubernetes/kubernetes\">k8s仓库</a>中存在一份go.mod，打开可以看到其require方式为url：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is a generated file. Do not edit directly.</span></span><br><span class=\"line\"><span class=\"comment\">// Ensure you&#x27;ve carefully read</span></span><br><span class=\"line\"><span class=\"comment\">// https://git.k8s.io/community/contributors/devel/sig-architecture/vendor.md</span></span><br><span class=\"line\"><span class=\"comment\">// Run hack/pin-dependency.sh to change pinned dependency versions.</span></span><br><span class=\"line\"><span class=\"comment\">// Run hack/update-vendor.sh to update go.mod files and the vendor directory.</span></span><br><span class=\"line\"></span><br><span class=\"line\">module k8s.io/kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"number\">1.20</span></span><br><span class=\"line\"></span><br><span class=\"line\">require (</span><br><span class=\"line\">\tbitbucket.org/bertimus9/systemstat v0<span class=\"number\">.5</span><span class=\"number\">.0</span></span><br><span class=\"line\">\tgithub.com/Azure/azure-sdk-<span class=\"keyword\">for</span>-<span class=\"keyword\">go</span> v68<span class=\"number\">.0</span><span class=\"number\">.0</span>+incompatible</span><br><span class=\"line\">\tgithub.com/Azure/<span class=\"keyword\">go</span>-autorest/autorest v0<span class=\"number\">.11</span><span class=\"number\">.29</span></span><br><span class=\"line\">\tgithub.com/Azure/<span class=\"keyword\">go</span>-autorest/autorest/adal v0<span class=\"number\">.9</span><span class=\"number\">.23</span></span><br><span class=\"line\">\tgithub.com/GoogleCloudPlatform/k8s-cloud-provider v1<span class=\"number\">.18</span><span class=\"number\">.1</span><span class=\"number\">-0.20220218231025</span>-f11817397a1b</span><br><span class=\"line\">\tgithub.com/JeffAshton/win_pdh v0<span class=\"number\">.0</span><span class=\"number\">.0</span><span class=\"number\">-20161109143554</span><span class=\"number\">-76</span>bb4ee9f0ab</span><br><span class=\"line\">\tgithub.com/Microsoft/<span class=\"keyword\">go</span>-winio v0<span class=\"number\">.6</span><span class=\"number\">.0</span></span><br><span class=\"line\">\tgithub.com/Microsoft/hcsshim v0<span class=\"number\">.8</span><span class=\"number\">.25</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>兼容性结论：</strong></p>\n<p>对于兼容性来说，因为go本身没有中央仓库管理，因此如有定制的patch等，在合入go mod官方仓库前是可以通过rpm等系统包管理机制来承载。go本身最终编译生成的文件也是一个标准系统二进制文件。</p>\n<h2 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h2><p>参考：</p>\n<ul>\n<li><p><a href=\"https://docs.npmjs.com/creating-and-publishing-scoped-public-packages\">Creating and publishing scoped public packages</a></p>\n</li>\n<li><p><a href=\"https://juejin.cn/post/7039140144250617887\">超详细 如何发布自己的 npm 包 - 掘金 (juejin.cn)</a></p>\n</li>\n</ul>\n<p>js的包发布通过npm即可完成，js的包也分两种，私人的和组织的，通过scope的表达方式进行（示例：<code>@xxx/hello-world</code>），这里的scope其实等价于namespace，用于预防和其他同名包冲突。不是所有的包都需要声明scope，比如vue。私人也可以发一些不带scope的包，比如shanglv-utils。</p>\n<p>因为在npm发布时要求必须要首先登录npm：<code>npm login</code>，所以不会出现私人包覆盖官方包的情况。</p>\n<p><strong>兼容性结论：</strong></p>\n<p>npm发布包的机制和python基本一致，对于官方包，当官方包已经占位的情况下，我们无法去覆盖它，如有类型兼容性的patch需要合入，只有一种方式，就是通过包官方仓库接纳。</p>\n<h2 id=\"rust\"><a href=\"#rust\" class=\"headerlink\" title=\"rust\"></a>rust</h2><p>rust是有中央仓库的：<a href=\"https://crates.io/\">crates.io: Rust Package Registry</a></p>\n<h2 id=\"ruby\"><a href=\"#ruby\" class=\"headerlink\" title=\"ruby\"></a>ruby</h2><p>ruby也有中央仓库托管各种包：<a href=\"https://rubygems.org/\">RubyGems.org</a></p>\n"},{"layout":"post","title":"spec依赖检查机制","date":"2023-07-01T15:00:02.000Z","_content":"\nspec文件的依赖是怎么检查的？\n\n编译阶段：通过BuildRequires；运行阶段：通过Requires\n\n```bash\nBuildRequires:  python\nRequires:       python\n```\n\n具体检查方式：\n\n查看rpmbuild源码：[Ftp - /releases/rpm-4.15.x/ :: Oregon State University Open Source Lab](http://ftp.rpm.org/releases/rpm-4.15.x/)\n\nBuildRequires被解释为使用宏__spec_buildrequires_template：\n\n![image-20230701170955227](/images/spec依赖检查机制/image-20230701170955227.png)\n\n该宏具体内容可以通过rpm --eval展开：\n\n```bash\nrpm --eval %{__spec_buildrequires_template}\n```\n\n![image-20230701171040194](/images/spec依赖检查机制/image-20230701171040194.png)\n\n这里涉及到一个环境变量PKG_CONFIG_PATH，使用了pkg-config工具，关于该工具介绍查看：[Guide to pkg-config (people.freedesktop.org)](https://people.freedesktop.org/~dbn/pkg-config-guide.html)\n\n该工具的作用：\n\n- 避免硬编码lib库路径：\n\n```bash\ngcc test.c `pkg-config --libs --cflags glib-2.0`\n\n[root@openEuler2003SP1 SPECS]# pkg-config --libs --cflags glib-2.0\n-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lglib-2.0\n```\n\n- 依赖版本检查\n\n```bash\n$ pkg-config --libs \"bar >= 2.7\"\nRequested 'bar >= 2.7' but version of bar is 2.1.2\n```\n\n如果bar依赖foo，则使用以下命令将连带出完整的依赖链：\n\n```bash\n[root@openEuler2003SP1 test]# pkg-config --libs --static foo\n-L/usr/lib -lfoo\n[root@openEuler2003SP1 test]# pkg-config --libs --static bar\n-L/usr/lib -lbar -L/usr/lib -lfoo\n```\n\n我们常见的configure输出的package not found错误，其实就是来自pkg-config的判断：\n\n```bash\n[root@openEuler2003SP1 test]# pkg-config --exists --print-errors xoxo\nPackage xoxo was not found in the pkg-config search path.\nPerhaps you should add the directory containing `xoxo.pc'\nto the PKG_CONFIG_PATH environment variable\nPackage 'xoxo', required by 'virtual:world', not found\n```\n\n\n\n我们再看下平时build阶段经常依赖的devel包，里面都有什么：\n\n![image-20230701173341798](/images/spec依赖检查机制/image-20230701173341798.png)\n\n可以看到有三部分，header、so、pc\n\nheader对应到头文件函数声明，so对应的函数具体实现，pc就是pkg-config的元数据文件了，这三元组最终组合形成完整的依赖编译命令：\n\n```bash\ngcc test.c -I/usr/include/foo -L/usr/lib -lbar -L/usr/lib -lfoo\n```\n\n现在回到spec，BuildRequires不满足打印示例：\n\n```bash\n[root@openEuler2003SP1 SPECS]# rpmbuild -ba daos.spec\nerror: Failed build dependencies:\n        daos-raft-devel = 0.9.1-1401.gc18bcb8 is needed by daos-2.2.0-4.aarch64\n        go >= 1.14 is needed by daos-2.2.0-4.aarch64\n```\n\n这些error依赖检查来自：\n\n![image-20230701173925324](/images/spec依赖检查机制/image-20230701173925324.png)\n\n![image-20230701174018570](/images/spec依赖检查机制/image-20230701174018570.png)\n\nts变量：transaction set，在rpmts.h中定义了一系列关于该变量的使用方法：\n\n![image-20230701175121884](/images/spec依赖检查机制/image-20230701175121884.png)\n\n所以rpm检查依赖的底层逻辑是通过查询数据库，数据库路径可以通过宏查看：\n\n```bash\n[root@openEuler2003SP1 SPECS]# rpm --eval \"%{_db_backend}\"\nbdb\n[root@openEuler2003SP1 SPECS]# rpm --eval %{_dbpath}\n/var/lib/rpm\n[root@openEuler2003SP1 SPECS]# ls /var/lib/rpm\nBasenames     __db.001  __db.003  Enhancename      Group       Name          Packages     Recommendname  Sha1header  Suggestname     Transfiletriggername\nConflictname  __db.002  Dirnames  Filetriggername  Installtid  Obsoletename  Providename  Requirename    Sigmd5      Supplementname  Triggername\n```\n\n它是一个bdb数据库（旧的也有使用sqlite：[rpm.org - RPM Database Recovery](https://rpm.org/user_doc/db_recovery.html)）\n\n\n\ndevel包如何构建：[linux - Building both devel and normal version of a RPM package - Stack Overflow](https://stackoverflow.com/questions/2913130/building-both-devel-and-normal-version-of-a-rpm-package)\n\n一般不会单独写一个devel的spec，而是和binary rpm的spec共用，通过在各个章节后面带devel标记区分：\n\n```bash\n%package devel\n%description devel\n%files devel\n```\n\n","source":"_posts/spec依赖检查机制.md","raw":"---\nlayout: post\ntitle:  \"spec依赖检查机制\"\ndate:   2023-07-01 23:00:02 +0800\ncategories: 生态\ntag: 兼容性\n---\n\nspec文件的依赖是怎么检查的？\n\n编译阶段：通过BuildRequires；运行阶段：通过Requires\n\n```bash\nBuildRequires:  python\nRequires:       python\n```\n\n具体检查方式：\n\n查看rpmbuild源码：[Ftp - /releases/rpm-4.15.x/ :: Oregon State University Open Source Lab](http://ftp.rpm.org/releases/rpm-4.15.x/)\n\nBuildRequires被解释为使用宏__spec_buildrequires_template：\n\n![image-20230701170955227](/images/spec依赖检查机制/image-20230701170955227.png)\n\n该宏具体内容可以通过rpm --eval展开：\n\n```bash\nrpm --eval %{__spec_buildrequires_template}\n```\n\n![image-20230701171040194](/images/spec依赖检查机制/image-20230701171040194.png)\n\n这里涉及到一个环境变量PKG_CONFIG_PATH，使用了pkg-config工具，关于该工具介绍查看：[Guide to pkg-config (people.freedesktop.org)](https://people.freedesktop.org/~dbn/pkg-config-guide.html)\n\n该工具的作用：\n\n- 避免硬编码lib库路径：\n\n```bash\ngcc test.c `pkg-config --libs --cflags glib-2.0`\n\n[root@openEuler2003SP1 SPECS]# pkg-config --libs --cflags glib-2.0\n-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lglib-2.0\n```\n\n- 依赖版本检查\n\n```bash\n$ pkg-config --libs \"bar >= 2.7\"\nRequested 'bar >= 2.7' but version of bar is 2.1.2\n```\n\n如果bar依赖foo，则使用以下命令将连带出完整的依赖链：\n\n```bash\n[root@openEuler2003SP1 test]# pkg-config --libs --static foo\n-L/usr/lib -lfoo\n[root@openEuler2003SP1 test]# pkg-config --libs --static bar\n-L/usr/lib -lbar -L/usr/lib -lfoo\n```\n\n我们常见的configure输出的package not found错误，其实就是来自pkg-config的判断：\n\n```bash\n[root@openEuler2003SP1 test]# pkg-config --exists --print-errors xoxo\nPackage xoxo was not found in the pkg-config search path.\nPerhaps you should add the directory containing `xoxo.pc'\nto the PKG_CONFIG_PATH environment variable\nPackage 'xoxo', required by 'virtual:world', not found\n```\n\n\n\n我们再看下平时build阶段经常依赖的devel包，里面都有什么：\n\n![image-20230701173341798](/images/spec依赖检查机制/image-20230701173341798.png)\n\n可以看到有三部分，header、so、pc\n\nheader对应到头文件函数声明，so对应的函数具体实现，pc就是pkg-config的元数据文件了，这三元组最终组合形成完整的依赖编译命令：\n\n```bash\ngcc test.c -I/usr/include/foo -L/usr/lib -lbar -L/usr/lib -lfoo\n```\n\n现在回到spec，BuildRequires不满足打印示例：\n\n```bash\n[root@openEuler2003SP1 SPECS]# rpmbuild -ba daos.spec\nerror: Failed build dependencies:\n        daos-raft-devel = 0.9.1-1401.gc18bcb8 is needed by daos-2.2.0-4.aarch64\n        go >= 1.14 is needed by daos-2.2.0-4.aarch64\n```\n\n这些error依赖检查来自：\n\n![image-20230701173925324](/images/spec依赖检查机制/image-20230701173925324.png)\n\n![image-20230701174018570](/images/spec依赖检查机制/image-20230701174018570.png)\n\nts变量：transaction set，在rpmts.h中定义了一系列关于该变量的使用方法：\n\n![image-20230701175121884](/images/spec依赖检查机制/image-20230701175121884.png)\n\n所以rpm检查依赖的底层逻辑是通过查询数据库，数据库路径可以通过宏查看：\n\n```bash\n[root@openEuler2003SP1 SPECS]# rpm --eval \"%{_db_backend}\"\nbdb\n[root@openEuler2003SP1 SPECS]# rpm --eval %{_dbpath}\n/var/lib/rpm\n[root@openEuler2003SP1 SPECS]# ls /var/lib/rpm\nBasenames     __db.001  __db.003  Enhancename      Group       Name          Packages     Recommendname  Sha1header  Suggestname     Transfiletriggername\nConflictname  __db.002  Dirnames  Filetriggername  Installtid  Obsoletename  Providename  Requirename    Sigmd5      Supplementname  Triggername\n```\n\n它是一个bdb数据库（旧的也有使用sqlite：[rpm.org - RPM Database Recovery](https://rpm.org/user_doc/db_recovery.html)）\n\n\n\ndevel包如何构建：[linux - Building both devel and normal version of a RPM package - Stack Overflow](https://stackoverflow.com/questions/2913130/building-both-devel-and-normal-version-of-a-rpm-package)\n\n一般不会单独写一个devel的spec，而是和binary rpm的spec共用，通过在各个章节后面带devel标记区分：\n\n```bash\n%package devel\n%description devel\n%files devel\n```\n\n","slug":"spec依赖检查机制","published":1,"updated":"2024-05-02T07:35:34.756Z","_id":"clvow96ey000xadpvdk1fd1px","comments":1,"photos":[],"content":"<p>spec文件的依赖是怎么检查的？</p>\n<p>编译阶段：通过BuildRequires；运行阶段：通过Requires</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BuildRequires:  python</span><br><span class=\"line\">Requires:       python</span><br></pre></td></tr></table></figure>\n\n<p>具体检查方式：</p>\n<p>查看rpmbuild源码：<a href=\"http://ftp.rpm.org/releases/rpm-4.15.x/\">Ftp - &#x2F;releases&#x2F;rpm-4.15.x&#x2F; :: Oregon State University Open Source Lab</a></p>\n<p>BuildRequires被解释为使用宏__spec_buildrequires_template：</p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701170955227.png\" alt=\"image-20230701170955227\"></p>\n<p>该宏具体内容可以通过rpm –eval展开：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --<span class=\"built_in\">eval</span> %&#123;__spec_buildrequires_template&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701171040194.png\" alt=\"image-20230701171040194\"></p>\n<p>这里涉及到一个环境变量PKG_CONFIG_PATH，使用了pkg-config工具，关于该工具介绍查看：<a href=\"https://people.freedesktop.org/~dbn/pkg-config-guide.html\">Guide to pkg-config (people.freedesktop.org)</a></p>\n<p>该工具的作用：</p>\n<ul>\n<li>避免硬编码lib库路径：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.c `pkg-config --libs --cflags glib-2.0`</span><br><span class=\"line\"></span><br><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># pkg-config --libs --cflags glib-2.0</span></span><br><span class=\"line\">-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lglib-2.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>依赖版本检查</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pkg-config --libs <span class=\"string\">&quot;bar &gt;= 2.7&quot;</span></span><br><span class=\"line\">Requested <span class=\"string\">&#x27;bar &gt;= 2.7&#x27;</span> but version of bar is 2.1.2</span><br></pre></td></tr></table></figure>\n\n<p>如果bar依赖foo，则使用以下命令将连带出完整的依赖链：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@openEuler2003SP1 <span class=\"built_in\">test</span>]<span class=\"comment\"># pkg-config --libs --static foo</span></span><br><span class=\"line\">-L/usr/lib -lfoo</span><br><span class=\"line\">[root@openEuler2003SP1 <span class=\"built_in\">test</span>]<span class=\"comment\"># pkg-config --libs --static bar</span></span><br><span class=\"line\">-L/usr/lib -lbar -L/usr/lib -lfoo</span><br></pre></td></tr></table></figure>\n\n<p>我们常见的configure输出的package not found错误，其实就是来自pkg-config的判断：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@openEuler2003SP1 <span class=\"built_in\">test</span>]<span class=\"comment\"># pkg-config --exists --print-errors xoxo</span></span><br><span class=\"line\">Package xoxo was not found <span class=\"keyword\">in</span> the pkg-config search path.</span><br><span class=\"line\">Perhaps you should add the directory containing `xoxo.pc<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">to the PKG_CONFIG_PATH environment variable</span></span><br><span class=\"line\"><span class=\"string\">Package &#x27;</span>xoxo<span class=\"string\">&#x27;, required by &#x27;</span>virtual:world<span class=\"string\">&#x27;, not found</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们再看下平时build阶段经常依赖的devel包，里面都有什么：</p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701173341798.png\" alt=\"image-20230701173341798\"></p>\n<p>可以看到有三部分，header、so、pc</p>\n<p>header对应到头文件函数声明，so对应的函数具体实现，pc就是pkg-config的元数据文件了，这三元组最终组合形成完整的依赖编译命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.c -I/usr/include/foo -L/usr/lib -lbar -L/usr/lib -lfoo</span><br></pre></td></tr></table></figure>\n\n<p>现在回到spec，BuildRequires不满足打印示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># rpmbuild -ba daos.spec</span></span><br><span class=\"line\">error: Failed build dependencies:</span><br><span class=\"line\">        daos-raft-devel = 0.9.1-1401.gc18bcb8 is needed by daos-2.2.0-4.aarch64</span><br><span class=\"line\">        go &gt;= 1.14 is needed by daos-2.2.0-4.aarch64</span><br></pre></td></tr></table></figure>\n\n<p>这些error依赖检查来自：</p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701173925324.png\" alt=\"image-20230701173925324\"></p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701174018570.png\" alt=\"image-20230701174018570\"></p>\n<p>ts变量：transaction set，在rpmts.h中定义了一系列关于该变量的使用方法：</p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701175121884.png\" alt=\"image-20230701175121884\"></p>\n<p>所以rpm检查依赖的底层逻辑是通过查询数据库，数据库路径可以通过宏查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># rpm --eval &quot;%&#123;_db_backend&#125;&quot;</span></span><br><span class=\"line\">bdb</span><br><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># rpm --eval %&#123;_dbpath&#125;</span></span><br><span class=\"line\">/var/lib/rpm</span><br><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># ls /var/lib/rpm</span></span><br><span class=\"line\">Basenames     __db.001  __db.003  Enhancename      Group       Name          Packages     Recommendname  Sha1header  Suggestname     Transfiletriggername</span><br><span class=\"line\">Conflictname  __db.002  Dirnames  Filetriggername  Installtid  Obsoletename  Providename  Requirename    Sigmd5      Supplementname  Triggername</span><br></pre></td></tr></table></figure>\n\n<p>它是一个bdb数据库（旧的也有使用sqlite：<a href=\"https://rpm.org/user_doc/db_recovery.html\">rpm.org - RPM Database Recovery</a>）</p>\n<p>devel包如何构建：<a href=\"https://stackoverflow.com/questions/2913130/building-both-devel-and-normal-version-of-a-rpm-package\">linux - Building both devel and normal version of a RPM package - Stack Overflow</a></p>\n<p>一般不会单独写一个devel的spec，而是和binary rpm的spec共用，通过在各个章节后面带devel标记区分：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%package devel</span><br><span class=\"line\">%description devel</span><br><span class=\"line\">%files devel</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>spec文件的依赖是怎么检查的？</p>\n<p>编译阶段：通过BuildRequires；运行阶段：通过Requires</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BuildRequires:  python</span><br><span class=\"line\">Requires:       python</span><br></pre></td></tr></table></figure>\n\n<p>具体检查方式：</p>\n<p>查看rpmbuild源码：<a href=\"http://ftp.rpm.org/releases/rpm-4.15.x/\">Ftp - &#x2F;releases&#x2F;rpm-4.15.x&#x2F; :: Oregon State University Open Source Lab</a></p>\n<p>BuildRequires被解释为使用宏__spec_buildrequires_template：</p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701170955227.png\" alt=\"image-20230701170955227\"></p>\n<p>该宏具体内容可以通过rpm –eval展开：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --<span class=\"built_in\">eval</span> %&#123;__spec_buildrequires_template&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701171040194.png\" alt=\"image-20230701171040194\"></p>\n<p>这里涉及到一个环境变量PKG_CONFIG_PATH，使用了pkg-config工具，关于该工具介绍查看：<a href=\"https://people.freedesktop.org/~dbn/pkg-config-guide.html\">Guide to pkg-config (people.freedesktop.org)</a></p>\n<p>该工具的作用：</p>\n<ul>\n<li>避免硬编码lib库路径：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.c `pkg-config --libs --cflags glib-2.0`</span><br><span class=\"line\"></span><br><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># pkg-config --libs --cflags glib-2.0</span></span><br><span class=\"line\">-I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -lglib-2.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>依赖版本检查</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pkg-config --libs <span class=\"string\">&quot;bar &gt;= 2.7&quot;</span></span><br><span class=\"line\">Requested <span class=\"string\">&#x27;bar &gt;= 2.7&#x27;</span> but version of bar is 2.1.2</span><br></pre></td></tr></table></figure>\n\n<p>如果bar依赖foo，则使用以下命令将连带出完整的依赖链：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@openEuler2003SP1 <span class=\"built_in\">test</span>]<span class=\"comment\"># pkg-config --libs --static foo</span></span><br><span class=\"line\">-L/usr/lib -lfoo</span><br><span class=\"line\">[root@openEuler2003SP1 <span class=\"built_in\">test</span>]<span class=\"comment\"># pkg-config --libs --static bar</span></span><br><span class=\"line\">-L/usr/lib -lbar -L/usr/lib -lfoo</span><br></pre></td></tr></table></figure>\n\n<p>我们常见的configure输出的package not found错误，其实就是来自pkg-config的判断：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@openEuler2003SP1 <span class=\"built_in\">test</span>]<span class=\"comment\"># pkg-config --exists --print-errors xoxo</span></span><br><span class=\"line\">Package xoxo was not found <span class=\"keyword\">in</span> the pkg-config search path.</span><br><span class=\"line\">Perhaps you should add the directory containing `xoxo.pc<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">to the PKG_CONFIG_PATH environment variable</span></span><br><span class=\"line\"><span class=\"string\">Package &#x27;</span>xoxo<span class=\"string\">&#x27;, required by &#x27;</span>virtual:world<span class=\"string\">&#x27;, not found</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们再看下平时build阶段经常依赖的devel包，里面都有什么：</p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701173341798.png\" alt=\"image-20230701173341798\"></p>\n<p>可以看到有三部分，header、so、pc</p>\n<p>header对应到头文件函数声明，so对应的函数具体实现，pc就是pkg-config的元数据文件了，这三元组最终组合形成完整的依赖编译命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.c -I/usr/include/foo -L/usr/lib -lbar -L/usr/lib -lfoo</span><br></pre></td></tr></table></figure>\n\n<p>现在回到spec，BuildRequires不满足打印示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># rpmbuild -ba daos.spec</span></span><br><span class=\"line\">error: Failed build dependencies:</span><br><span class=\"line\">        daos-raft-devel = 0.9.1-1401.gc18bcb8 is needed by daos-2.2.0-4.aarch64</span><br><span class=\"line\">        go &gt;= 1.14 is needed by daos-2.2.0-4.aarch64</span><br></pre></td></tr></table></figure>\n\n<p>这些error依赖检查来自：</p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701173925324.png\" alt=\"image-20230701173925324\"></p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701174018570.png\" alt=\"image-20230701174018570\"></p>\n<p>ts变量：transaction set，在rpmts.h中定义了一系列关于该变量的使用方法：</p>\n<p><img src=\"/images/spec%E4%BE%9D%E8%B5%96%E6%A3%80%E6%9F%A5%E6%9C%BA%E5%88%B6/image-20230701175121884.png\" alt=\"image-20230701175121884\"></p>\n<p>所以rpm检查依赖的底层逻辑是通过查询数据库，数据库路径可以通过宏查看：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># rpm --eval &quot;%&#123;_db_backend&#125;&quot;</span></span><br><span class=\"line\">bdb</span><br><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># rpm --eval %&#123;_dbpath&#125;</span></span><br><span class=\"line\">/var/lib/rpm</span><br><span class=\"line\">[root@openEuler2003SP1 SPECS]<span class=\"comment\"># ls /var/lib/rpm</span></span><br><span class=\"line\">Basenames     __db.001  __db.003  Enhancename      Group       Name          Packages     Recommendname  Sha1header  Suggestname     Transfiletriggername</span><br><span class=\"line\">Conflictname  __db.002  Dirnames  Filetriggername  Installtid  Obsoletename  Providename  Requirename    Sigmd5      Supplementname  Triggername</span><br></pre></td></tr></table></figure>\n\n<p>它是一个bdb数据库（旧的也有使用sqlite：<a href=\"https://rpm.org/user_doc/db_recovery.html\">rpm.org - RPM Database Recovery</a>）</p>\n<p>devel包如何构建：<a href=\"https://stackoverflow.com/questions/2913130/building-both-devel-and-normal-version-of-a-rpm-package\">linux - Building both devel and normal version of a RPM package - Stack Overflow</a></p>\n<p>一般不会单独写一个devel的spec，而是和binary rpm的spec共用，通过在各个章节后面带devel标记区分：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%package devel</span><br><span class=\"line\">%description devel</span><br><span class=\"line\">%files devel</span><br></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clvow18l5000oadpvfl37fi0s","category_id":"clvow0naz000badpv173d2a7h","_id":"clvow18l6000qadpva89wcsrf"},{"post_id":"clvow1hnb000radpv6bcte1r8","category_id":"clvow0naz000badpv173d2a7h","_id":"clvow1hnd000tadpv9uhm84h8"},{"post_id":"clvow96ey000xadpvdk1fd1px","category_id":"clvow0naz000badpv173d2a7h","_id":"clvow96f0000zadpv9epm1rth"}],"PostTag":[{"post_id":"clvow18l5000oadpvfl37fi0s","tag_id":"clvow0naz000cadpv3gbteyg0","_id":"clvow18l6000padpvhh214vyb"},{"post_id":"clvow1hnb000radpv6bcte1r8","tag_id":"clvow0naz000cadpv3gbteyg0","_id":"clvow1hnd000sadpvgoqw5b2m"},{"post_id":"clvow96ey000xadpvdk1fd1px","tag_id":"clvow0naz000cadpv3gbteyg0","_id":"clvow96f0000yadpv0szk1kfb"}],"Tag":[{"name":"jekyll","_id":"clvow0nau0006adpvhbioalii"},{"name":"兼容性","_id":"clvow0naz000cadpv3gbteyg0"}]}}